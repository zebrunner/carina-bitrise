/*
 * Bitrise API
 * Official REST API for Bitrise.io
 *
 * OpenAPI spec version: 0.1
 * Contact: letsconnect@bitrise.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.zebrunner.carina.bitrise.client.model;

import com.google.gson.annotations.SerializedName;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * V0BuildTriggerParamsBuildParams
 */

public class V0BuildTriggerParamsBuildParams {
    @SerializedName("base_repository_url")
    private String baseRepositoryUrl = null;

    @SerializedName("branch")
    private String branch = null;

    @SerializedName("branch_dest")
    private String branchDest = null;

    @SerializedName("branch_dest_repo_owner")
    private String branchDestRepoOwner = null;

    @SerializedName("branch_repo_owner")
    private String branchRepoOwner = null;

    @SerializedName("build_request_slug")
    private String buildRequestSlug = null;

    @SerializedName("commit_hash")
    private String commitHash = null;

    @SerializedName("commit_message")
    private String commitMessage = null;

    @SerializedName("commit_paths")
    private List<V0CommitPaths> commitPaths = null;

    @SerializedName("diff_url")
    private String diffUrl = null;

    @SerializedName("environments")
    private List<V0BuildParamsEnvironment> environments = null;

    @SerializedName("head_repository_url")
    private String headRepositoryUrl = null;

    @SerializedName("pipeline_id")
    private String pipelineId = null;

    @SerializedName("pull_request_author")
    private String pullRequestAuthor = null;

    @SerializedName("pull_request_head_branch")
    private String pullRequestHeadBranch = null;

    @SerializedName("pull_request_id")
    private Object pullRequestId = null;

    @SerializedName("pull_request_merge_branch")
    private String pullRequestMergeBranch = null;

    @SerializedName("pull_request_repository_url")
    private String pullRequestRepositoryUrl = null;

    @SerializedName("pull_request_unverified_merge_branch")
    private String pullRequestUnverifiedMergeBranch = null;

    @SerializedName("skip_git_status_report")
    private Boolean skipGitStatusReport = null;

    @SerializedName("tag")
    private String tag = null;

    @SerializedName("workflow_id")
    private String workflowId = null;

    public V0BuildTriggerParamsBuildParams baseRepositoryUrl(String baseRepositoryUrl) {
        this.baseRepositoryUrl = baseRepositoryUrl;
        return this;
    }

    /**
     * Get baseRepositoryUrl
     *
     * @return baseRepositoryUrl
     **/

    public String getBaseRepositoryUrl() {
        return baseRepositoryUrl;
    }

    public void setBaseRepositoryUrl(String baseRepositoryUrl) {
        this.baseRepositoryUrl = baseRepositoryUrl;
    }

    public V0BuildTriggerParamsBuildParams branch(String branch) {
        this.branch = branch;
        return this;
    }

    /**
     * Get branch
     *
     * @return branch
     **/

    public String getBranch() {
        return branch;
    }

    public void setBranch(String branch) {
        this.branch = branch;
    }

    public V0BuildTriggerParamsBuildParams branchDest(String branchDest) {
        this.branchDest = branchDest;
        return this;
    }

    /**
     * Get branchDest
     *
     * @return branchDest
     **/

    public String getBranchDest() {
        return branchDest;
    }

    public void setBranchDest(String branchDest) {
        this.branchDest = branchDest;
    }

    public V0BuildTriggerParamsBuildParams branchDestRepoOwner(String branchDestRepoOwner) {
        this.branchDestRepoOwner = branchDestRepoOwner;
        return this;
    }

    /**
     * Get branchDestRepoOwner
     *
     * @return branchDestRepoOwner
     **/

    public String getBranchDestRepoOwner() {
        return branchDestRepoOwner;
    }

    public void setBranchDestRepoOwner(String branchDestRepoOwner) {
        this.branchDestRepoOwner = branchDestRepoOwner;
    }

    public V0BuildTriggerParamsBuildParams branchRepoOwner(String branchRepoOwner) {
        this.branchRepoOwner = branchRepoOwner;
        return this;
    }

    /**
     * Get branchRepoOwner
     *
     * @return branchRepoOwner
     **/

    public String getBranchRepoOwner() {
        return branchRepoOwner;
    }

    public void setBranchRepoOwner(String branchRepoOwner) {
        this.branchRepoOwner = branchRepoOwner;
    }

    public V0BuildTriggerParamsBuildParams buildRequestSlug(String buildRequestSlug) {
        this.buildRequestSlug = buildRequestSlug;
        return this;
    }

    /**
     * Get buildRequestSlug
     *
     * @return buildRequestSlug
     **/

    public String getBuildRequestSlug() {
        return buildRequestSlug;
    }

    public void setBuildRequestSlug(String buildRequestSlug) {
        this.buildRequestSlug = buildRequestSlug;
    }

    public V0BuildTriggerParamsBuildParams commitHash(String commitHash) {
        this.commitHash = commitHash;
        return this;
    }

    /**
     * Get commitHash
     *
     * @return commitHash
     **/

    public String getCommitHash() {
        return commitHash;
    }

    public void setCommitHash(String commitHash) {
        this.commitHash = commitHash;
    }

    public V0BuildTriggerParamsBuildParams commitMessage(String commitMessage) {
        this.commitMessage = commitMessage;
        return this;
    }

    /**
     * Get commitMessage
     *
     * @return commitMessage
     **/

    public String getCommitMessage() {
        return commitMessage;
    }

    public void setCommitMessage(String commitMessage) {
        this.commitMessage = commitMessage;
    }

    public V0BuildTriggerParamsBuildParams commitPaths(List<V0CommitPaths> commitPaths) {
        this.commitPaths = commitPaths;
        return this;
    }

    public V0BuildTriggerParamsBuildParams addCommitPathsItem(V0CommitPaths commitPathsItem) {
        if (this.commitPaths == null) {
            this.commitPaths = new ArrayList<V0CommitPaths>();
        }
        this.commitPaths.add(commitPathsItem);
        return this;
    }

    /**
     * Get commitPaths
     *
     * @return commitPaths
     **/

    public List<V0CommitPaths> getCommitPaths() {
        return commitPaths;
    }

    public void setCommitPaths(List<V0CommitPaths> commitPaths) {
        this.commitPaths = commitPaths;
    }

    public V0BuildTriggerParamsBuildParams diffUrl(String diffUrl) {
        this.diffUrl = diffUrl;
        return this;
    }

    /**
     * Get diffUrl
     *
     * @return diffUrl
     **/

    public String getDiffUrl() {
        return diffUrl;
    }

    public void setDiffUrl(String diffUrl) {
        this.diffUrl = diffUrl;
    }

    public V0BuildTriggerParamsBuildParams environments(List<V0BuildParamsEnvironment> environments) {
        this.environments = environments;
        return this;
    }

    public V0BuildTriggerParamsBuildParams addEnvironmentsItem(V0BuildParamsEnvironment environmentsItem) {
        if (this.environments == null) {
            this.environments = new ArrayList<V0BuildParamsEnvironment>();
        }
        this.environments.add(environmentsItem);
        return this;
    }

    /**
     * Get environments
     *
     * @return environments
     **/

    public List<V0BuildParamsEnvironment> getEnvironments() {
        return environments;
    }

    public void setEnvironments(List<V0BuildParamsEnvironment> environments) {
        this.environments = environments;
    }

    public V0BuildTriggerParamsBuildParams headRepositoryUrl(String headRepositoryUrl) {
        this.headRepositoryUrl = headRepositoryUrl;
        return this;
    }

    /**
     * Get headRepositoryUrl
     *
     * @return headRepositoryUrl
     **/

    public String getHeadRepositoryUrl() {
        return headRepositoryUrl;
    }

    public void setHeadRepositoryUrl(String headRepositoryUrl) {
        this.headRepositoryUrl = headRepositoryUrl;
    }

    public V0BuildTriggerParamsBuildParams pipelineId(String pipelineId) {
        this.pipelineId = pipelineId;
        return this;
    }

    /**
     * Get pipelineId
     *
     * @return pipelineId
     **/

    public String getPipelineId() {
        return pipelineId;
    }

    public void setPipelineId(String pipelineId) {
        this.pipelineId = pipelineId;
    }

    public V0BuildTriggerParamsBuildParams pullRequestAuthor(String pullRequestAuthor) {
        this.pullRequestAuthor = pullRequestAuthor;
        return this;
    }

    /**
     * Get pullRequestAuthor
     *
     * @return pullRequestAuthor
     **/

    public String getPullRequestAuthor() {
        return pullRequestAuthor;
    }

    public void setPullRequestAuthor(String pullRequestAuthor) {
        this.pullRequestAuthor = pullRequestAuthor;
    }

    public V0BuildTriggerParamsBuildParams pullRequestHeadBranch(String pullRequestHeadBranch) {
        this.pullRequestHeadBranch = pullRequestHeadBranch;
        return this;
    }

    /**
     * Get pullRequestHeadBranch
     *
     * @return pullRequestHeadBranch
     **/

    public String getPullRequestHeadBranch() {
        return pullRequestHeadBranch;
    }

    public void setPullRequestHeadBranch(String pullRequestHeadBranch) {
        this.pullRequestHeadBranch = pullRequestHeadBranch;
    }

    public V0BuildTriggerParamsBuildParams pullRequestId(Object pullRequestId) {
        this.pullRequestId = pullRequestId;
        return this;
    }

    /**
     * Get pullRequestId
     *
     * @return pullRequestId
     **/

    public Object getPullRequestId() {
        return pullRequestId;
    }

    public void setPullRequestId(Object pullRequestId) {
        this.pullRequestId = pullRequestId;
    }

    public V0BuildTriggerParamsBuildParams pullRequestMergeBranch(String pullRequestMergeBranch) {
        this.pullRequestMergeBranch = pullRequestMergeBranch;
        return this;
    }

    /**
     * Get pullRequestMergeBranch
     *
     * @return pullRequestMergeBranch
     **/

    public String getPullRequestMergeBranch() {
        return pullRequestMergeBranch;
    }

    public void setPullRequestMergeBranch(String pullRequestMergeBranch) {
        this.pullRequestMergeBranch = pullRequestMergeBranch;
    }

    public V0BuildTriggerParamsBuildParams pullRequestRepositoryUrl(String pullRequestRepositoryUrl) {
        this.pullRequestRepositoryUrl = pullRequestRepositoryUrl;
        return this;
    }

    /**
     * Get pullRequestRepositoryUrl
     *
     * @return pullRequestRepositoryUrl
     **/

    public String getPullRequestRepositoryUrl() {
        return pullRequestRepositoryUrl;
    }

    public void setPullRequestRepositoryUrl(String pullRequestRepositoryUrl) {
        this.pullRequestRepositoryUrl = pullRequestRepositoryUrl;
    }

    public V0BuildTriggerParamsBuildParams pullRequestUnverifiedMergeBranch(String pullRequestUnverifiedMergeBranch) {
        this.pullRequestUnverifiedMergeBranch = pullRequestUnverifiedMergeBranch;
        return this;
    }

    /**
     * Get pullRequestUnverifiedMergeBranch
     *
     * @return pullRequestUnverifiedMergeBranch
     **/

    public String getPullRequestUnverifiedMergeBranch() {
        return pullRequestUnverifiedMergeBranch;
    }

    public void setPullRequestUnverifiedMergeBranch(String pullRequestUnverifiedMergeBranch) {
        this.pullRequestUnverifiedMergeBranch = pullRequestUnverifiedMergeBranch;
    }

    public V0BuildTriggerParamsBuildParams skipGitStatusReport(Boolean skipGitStatusReport) {
        this.skipGitStatusReport = skipGitStatusReport;
        return this;
    }

    /**
     * Get skipGitStatusReport
     *
     * @return skipGitStatusReport
     **/

    public Boolean isSkipGitStatusReport() {
        return skipGitStatusReport;
    }

    public void setSkipGitStatusReport(Boolean skipGitStatusReport) {
        this.skipGitStatusReport = skipGitStatusReport;
    }

    public V0BuildTriggerParamsBuildParams tag(String tag) {
        this.tag = tag;
        return this;
    }

    /**
     * Get tag
     *
     * @return tag
     **/

    public String getTag() {
        return tag;
    }

    public void setTag(String tag) {
        this.tag = tag;
    }

    public V0BuildTriggerParamsBuildParams workflowId(String workflowId) {
        this.workflowId = workflowId;
        return this;
    }

    /**
     * Get workflowId
     *
     * @return workflowId
     **/

    public String getWorkflowId() {
        return workflowId;
    }

    public void setWorkflowId(String workflowId) {
        this.workflowId = workflowId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V0BuildTriggerParamsBuildParams v0BuildTriggerParamsBuildParams = (V0BuildTriggerParamsBuildParams) o;
        return Objects.equals(this.baseRepositoryUrl, v0BuildTriggerParamsBuildParams.baseRepositoryUrl) &&
                Objects.equals(this.branch, v0BuildTriggerParamsBuildParams.branch) &&
                Objects.equals(this.branchDest, v0BuildTriggerParamsBuildParams.branchDest) &&
                Objects.equals(this.branchDestRepoOwner, v0BuildTriggerParamsBuildParams.branchDestRepoOwner) &&
                Objects.equals(this.branchRepoOwner, v0BuildTriggerParamsBuildParams.branchRepoOwner) &&
                Objects.equals(this.buildRequestSlug, v0BuildTriggerParamsBuildParams.buildRequestSlug) &&
                Objects.equals(this.commitHash, v0BuildTriggerParamsBuildParams.commitHash) &&
                Objects.equals(this.commitMessage, v0BuildTriggerParamsBuildParams.commitMessage) &&
                Objects.equals(this.commitPaths, v0BuildTriggerParamsBuildParams.commitPaths) &&
                Objects.equals(this.diffUrl, v0BuildTriggerParamsBuildParams.diffUrl) &&
                Objects.equals(this.environments, v0BuildTriggerParamsBuildParams.environments) &&
                Objects.equals(this.headRepositoryUrl, v0BuildTriggerParamsBuildParams.headRepositoryUrl) &&
                Objects.equals(this.pipelineId, v0BuildTriggerParamsBuildParams.pipelineId) &&
                Objects.equals(this.pullRequestAuthor, v0BuildTriggerParamsBuildParams.pullRequestAuthor) &&
                Objects.equals(this.pullRequestHeadBranch, v0BuildTriggerParamsBuildParams.pullRequestHeadBranch) &&
                Objects.equals(this.pullRequestId, v0BuildTriggerParamsBuildParams.pullRequestId) &&
                Objects.equals(this.pullRequestMergeBranch, v0BuildTriggerParamsBuildParams.pullRequestMergeBranch) &&
                Objects.equals(this.pullRequestRepositoryUrl, v0BuildTriggerParamsBuildParams.pullRequestRepositoryUrl) &&
                Objects.equals(this.pullRequestUnverifiedMergeBranch, v0BuildTriggerParamsBuildParams.pullRequestUnverifiedMergeBranch) &&
                Objects.equals(this.skipGitStatusReport, v0BuildTriggerParamsBuildParams.skipGitStatusReport) &&
                Objects.equals(this.tag, v0BuildTriggerParamsBuildParams.tag) &&
                Objects.equals(this.workflowId, v0BuildTriggerParamsBuildParams.workflowId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(baseRepositoryUrl, branch, branchDest, branchDestRepoOwner, branchRepoOwner, buildRequestSlug, commitHash, commitMessage,
                commitPaths, diffUrl, environments, headRepositoryUrl, pipelineId, pullRequestAuthor, pullRequestHeadBranch, pullRequestId,
                pullRequestMergeBranch, pullRequestRepositoryUrl, pullRequestUnverifiedMergeBranch, skipGitStatusReport, tag, workflowId);
    }

    @Override
    public String toString() {

        String sb = "class V0BuildTriggerParamsBuildParams {\n"
                + "    baseRepositoryUrl: " + toIndentedString(baseRepositoryUrl) + "\n"
                + "    branch: " + toIndentedString(branch) + "\n"
                + "    branchDest: " + toIndentedString(branchDest) + "\n"
                + "    branchDestRepoOwner: " + toIndentedString(branchDestRepoOwner) + "\n"
                + "    branchRepoOwner: " + toIndentedString(branchRepoOwner) + "\n"
                + "    buildRequestSlug: " + toIndentedString(buildRequestSlug) + "\n"
                + "    commitHash: " + toIndentedString(commitHash) + "\n"
                + "    commitMessage: " + toIndentedString(commitMessage) + "\n"
                + "    commitPaths: " + toIndentedString(commitPaths) + "\n"
                + "    diffUrl: " + toIndentedString(diffUrl) + "\n"
                + "    environments: " + toIndentedString(environments) + "\n"
                + "    headRepositoryUrl: " + toIndentedString(headRepositoryUrl) + "\n"
                + "    pipelineId: " + toIndentedString(pipelineId) + "\n"
                + "    pullRequestAuthor: " + toIndentedString(pullRequestAuthor) + "\n"
                + "    pullRequestHeadBranch: " + toIndentedString(pullRequestHeadBranch) + "\n"
                + "    pullRequestId: " + toIndentedString(pullRequestId) + "\n"
                + "    pullRequestMergeBranch: " + toIndentedString(pullRequestMergeBranch) + "\n"
                + "    pullRequestRepositoryUrl: " + toIndentedString(pullRequestRepositoryUrl) + "\n"
                + "    pullRequestUnverifiedMergeBranch: " + toIndentedString(pullRequestUnverifiedMergeBranch) + "\n"
                + "    skipGitStatusReport: " + toIndentedString(skipGitStatusReport) + "\n"
                + "    tag: " + toIndentedString(tag) + "\n"
                + "    workflowId: " + toIndentedString(workflowId) + "\n"
                + "}";
        return sb;
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
