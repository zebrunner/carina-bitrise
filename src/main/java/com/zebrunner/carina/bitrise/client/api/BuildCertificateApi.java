/*
 * Bitrise API
 * Official REST API for Bitrise.io
 *
 * OpenAPI spec version: 0.1
 * Contact: letsconnect@bitrise.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.zebrunner.carina.bitrise.client.api;

import com.google.gson.reflect.TypeToken;
import com.zebrunner.carina.bitrise.client.ApiCallback;
import com.zebrunner.carina.bitrise.client.ApiClient;
import com.zebrunner.carina.bitrise.client.ApiException;
import com.zebrunner.carina.bitrise.client.ApiResponse;
import com.zebrunner.carina.bitrise.client.Configuration;
import com.zebrunner.carina.bitrise.client.Pair;
import com.zebrunner.carina.bitrise.client.ProgressRequestBody;
import com.zebrunner.carina.bitrise.client.ProgressResponseBody;
import com.zebrunner.carina.bitrise.client.model.V0BuildCertificateListResponseModel;
import com.zebrunner.carina.bitrise.client.model.V0BuildCertificateResponseModel;
import com.zebrunner.carina.bitrise.client.model.V0BuildCertificateUpdateParams;
import com.zebrunner.carina.bitrise.client.model.V0BuildCertificateUploadParams;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BuildCertificateApi {
    private ApiClient apiClient;

    public BuildCertificateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BuildCertificateApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for buildCertificateConfirm
     *
     * @param appSlug                 App slug (required)
     * @param buildCertificateSlug    Build certificate slug (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call buildCertificateConfirmCall(String appSlug, String buildCertificateSlug,
            final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{app-slug}/build-certificates/{build-certificate-slug}/uploaded"
                .replaceAll("\\{" + "app-slug" + "\\}", apiClient.escapeString(appSlug))
                .replaceAll("\\{" + "build-certificate-slug" + "\\}", apiClient.escapeString(buildCertificateSlug));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PersonalAccessToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams,
                localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call buildCertificateConfirmValidateBeforeCall(String appSlug, String buildCertificateSlug,
            final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException {
        // verify the required parameter 'appSlug' is set
        if (appSlug == null) {
            throw new ApiException("Missing the required parameter 'appSlug' when calling buildCertificateConfirm(Async)");
        }
        // verify the required parameter 'buildCertificateSlug' is set
        if (buildCertificateSlug == null) {
            throw new ApiException("Missing the required parameter 'buildCertificateSlug' when calling buildCertificateConfirm(Async)");
        }

        return buildCertificateConfirmCall(appSlug, buildCertificateSlug, progressListener, progressRequestListener);
    }

    /**
     * Confirm a build certificate upload
     * This is the last step of uploading a build certificate to Bitrise. Confirm the build certificate upload and view the file on the Code Signing tab of a specific app. Read more in our [Confirming the iOS code signing file upload](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#confirming-the-ios-code-signing-file-upload) guide.
     *
     * @param appSlug              App slug (required)
     * @param buildCertificateSlug Build certificate slug (required)
     * @return V0BuildCertificateResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V0BuildCertificateResponseModel buildCertificateConfirm(String appSlug, String buildCertificateSlug) throws ApiException {
        ApiResponse<V0BuildCertificateResponseModel> resp = buildCertificateConfirmWithHttpInfo(appSlug, buildCertificateSlug);
        return resp.getData();
    }

    /**
     * Confirm a build certificate upload
     * This is the last step of uploading a build certificate to Bitrise. Confirm the build certificate upload and view the file on the Code Signing tab of a specific app. Read more in our [Confirming the iOS code signing file upload](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#confirming-the-ios-code-signing-file-upload) guide.
     *
     * @param appSlug              App slug (required)
     * @param buildCertificateSlug Build certificate slug (required)
     * @return ApiResponse&lt;V0BuildCertificateResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V0BuildCertificateResponseModel> buildCertificateConfirmWithHttpInfo(String appSlug, String buildCertificateSlug)
            throws ApiException {
        com.squareup.okhttp.Call call = buildCertificateConfirmValidateBeforeCall(appSlug, buildCertificateSlug, null, null);
        Type localVarReturnType = new TypeToken<V0BuildCertificateResponseModel>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Confirm a build certificate upload (asynchronously)
     * This is the last step of uploading a build certificate to Bitrise. Confirm the build certificate upload and view the file on the Code Signing tab of a specific app. Read more in our [Confirming the iOS code signing file upload](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#confirming-the-ios-code-signing-file-upload) guide.
     *
     * @param appSlug              App slug (required)
     * @param buildCertificateSlug Build certificate slug (required)
     * @param callback             The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call buildCertificateConfirmAsync(String appSlug, String buildCertificateSlug,
            final ApiCallback<V0BuildCertificateResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = buildCertificateConfirmValidateBeforeCall(appSlug, buildCertificateSlug, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<V0BuildCertificateResponseModel>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for buildCertificateCreate
     *
     * @param body                    Build certificate parameters such as file name and its file size (required)
     * @param appSlug                 App slug (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call buildCertificateCreateCall(V0BuildCertificateUploadParams body, String appSlug,
            final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/apps/{app-slug}/build-certificates"
                .replaceAll("\\{" + "app-slug" + "\\}", apiClient.escapeString(appSlug));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PersonalAccessToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams,
                localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call buildCertificateCreateValidateBeforeCall(V0BuildCertificateUploadParams body, String appSlug,
            final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling buildCertificateCreate(Async)");
        }
        // verify the required parameter 'appSlug' is set
        if (appSlug == null) {
            throw new ApiException("Missing the required parameter 'appSlug' when calling buildCertificateCreate(Async)");
        }

        com.squareup.okhttp.Call call = buildCertificateCreateCall(body, appSlug, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a build certificate
     * Create a temporary pre-signed upload URL for the build certificate and upload the file to AWS with a simple &#x60;curl&#x60; request. To complete the uploading process and view your files on the Code Signing tab of your app, continue with the [POST /apps/{app-slug}/build-certificates/{build-certificate-slug}/uploaded](https://api-docs.bitrise.io/#/build-certificate/build-certificate-confirm) endpoint. Read more in our [Creating and uploading an iOS code signing file](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#creating--uploading-an-ios-code-signing-file) guide.
     *
     * @param body    Build certificate parameters such as file name and its file size (required)
     * @param appSlug App slug (required)
     * @return V0BuildCertificateResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V0BuildCertificateResponseModel buildCertificateCreate(V0BuildCertificateUploadParams body, String appSlug) throws ApiException {
        ApiResponse<V0BuildCertificateResponseModel> resp = buildCertificateCreateWithHttpInfo(body, appSlug);
        return resp.getData();
    }

    /**
     * Create a build certificate
     * Create a temporary pre-signed upload URL for the build certificate and upload the file to AWS with a simple &#x60;curl&#x60; request. To complete the uploading process and view your files on the Code Signing tab of your app, continue with the [POST /apps/{app-slug}/build-certificates/{build-certificate-slug}/uploaded](https://api-docs.bitrise.io/#/build-certificate/build-certificate-confirm) endpoint. Read more in our [Creating and uploading an iOS code signing file](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#creating--uploading-an-ios-code-signing-file) guide.
     *
     * @param body    Build certificate parameters such as file name and its file size (required)
     * @param appSlug App slug (required)
     * @return ApiResponse&lt;V0BuildCertificateResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V0BuildCertificateResponseModel> buildCertificateCreateWithHttpInfo(V0BuildCertificateUploadParams body, String appSlug)
            throws ApiException {
        com.squareup.okhttp.Call call = buildCertificateCreateValidateBeforeCall(body, appSlug, null, null);
        Type localVarReturnType = new TypeToken<V0BuildCertificateResponseModel>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a build certificate (asynchronously)
     * Create a temporary pre-signed upload URL for the build certificate and upload the file to AWS with a simple &#x60;curl&#x60; request. To complete the uploading process and view your files on the Code Signing tab of your app, continue with the [POST /apps/{app-slug}/build-certificates/{build-certificate-slug}/uploaded](https://api-docs.bitrise.io/#/build-certificate/build-certificate-confirm) endpoint. Read more in our [Creating and uploading an iOS code signing file](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#creating--uploading-an-ios-code-signing-file) guide.
     *
     * @param body     Build certificate parameters such as file name and its file size (required)
     * @param appSlug  App slug (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call buildCertificateCreateAsync(V0BuildCertificateUploadParams body, String appSlug,
            final ApiCallback<V0BuildCertificateResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = buildCertificateCreateValidateBeforeCall(body, appSlug, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V0BuildCertificateResponseModel>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for buildCertificateDelete
     *
     * @param appSlug                 App slug (required)
     * @param buildCertificateSlug    Build certificate slug (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call buildCertificateDeleteCall(String appSlug, String buildCertificateSlug,
            final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{app-slug}/build-certificates/{build-certificate-slug}"
                .replaceAll("\\{" + "app-slug" + "\\}", apiClient.escapeString(appSlug))
                .replaceAll("\\{" + "build-certificate-slug" + "\\}", apiClient.escapeString(buildCertificateSlug));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PersonalAccessToken" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams,
                localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call buildCertificateDeleteValidateBeforeCall(String appSlug, String buildCertificateSlug,
            final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException {
        // verify the required parameter 'appSlug' is set
        if (appSlug == null) {
            throw new ApiException("Missing the required parameter 'appSlug' when calling buildCertificateDelete(Async)");
        }
        // verify the required parameter 'buildCertificateSlug' is set
        if (buildCertificateSlug == null) {
            throw new ApiException("Missing the required parameter 'buildCertificateSlug' when calling buildCertificateDelete(Async)");
        }

        com.squareup.okhttp.Call call = buildCertificateDeleteCall(appSlug, buildCertificateSlug, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a build certificate
     * Delete an app&#x27;s build certificate. You can fetch the build certificate slug for this endpoint if you first call the [GET /apps/{app-slug}/build-certificates](https://api-docs.bitrise.io/#/build-certificate/build-certificate-list) endpoint to list all available build certificates of an app. Read more in our [Deleting an iOS code signing file](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#deleting-an-ios-code-signing-file) guide.
     *
     * @param appSlug              App slug (required)
     * @param buildCertificateSlug Build certificate slug (required)
     * @return V0BuildCertificateResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V0BuildCertificateResponseModel buildCertificateDelete(String appSlug, String buildCertificateSlug) throws ApiException {
        ApiResponse<V0BuildCertificateResponseModel> resp = buildCertificateDeleteWithHttpInfo(appSlug, buildCertificateSlug);
        return resp.getData();
    }

    /**
     * Delete a build certificate
     * Delete an app&#x27;s build certificate. You can fetch the build certificate slug for this endpoint if you first call the [GET /apps/{app-slug}/build-certificates](https://api-docs.bitrise.io/#/build-certificate/build-certificate-list) endpoint to list all available build certificates of an app. Read more in our [Deleting an iOS code signing file](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#deleting-an-ios-code-signing-file) guide.
     *
     * @param appSlug              App slug (required)
     * @param buildCertificateSlug Build certificate slug (required)
     * @return ApiResponse&lt;V0BuildCertificateResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V0BuildCertificateResponseModel> buildCertificateDeleteWithHttpInfo(String appSlug, String buildCertificateSlug)
            throws ApiException {
        com.squareup.okhttp.Call call = buildCertificateDeleteValidateBeforeCall(appSlug, buildCertificateSlug, null, null);
        Type localVarReturnType = new TypeToken<V0BuildCertificateResponseModel>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a build certificate (asynchronously)
     * Delete an app&#x27;s build certificate. You can fetch the build certificate slug for this endpoint if you first call the [GET /apps/{app-slug}/build-certificates](https://api-docs.bitrise.io/#/build-certificate/build-certificate-list) endpoint to list all available build certificates of an app. Read more in our [Deleting an iOS code signing file](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#deleting-an-ios-code-signing-file) guide.
     *
     * @param appSlug              App slug (required)
     * @param buildCertificateSlug Build certificate slug (required)
     * @param callback             The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call buildCertificateDeleteAsync(String appSlug, String buildCertificateSlug,
            final ApiCallback<V0BuildCertificateResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = buildCertificateDeleteValidateBeforeCall(appSlug, buildCertificateSlug, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<V0BuildCertificateResponseModel>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for buildCertificateList
     *
     * @param appSlug                 App slug (required)
     * @param next                    Slug of the first build certificate in the response (optional)
     * @param limit                   Max number of build certificates per page is 50. (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call buildCertificateListCall(String appSlug, String next, Integer limit,
            final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{app-slug}/build-certificates"
                .replaceAll("\\{" + "app-slug" + "\\}", apiClient.escapeString(appSlug));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (next != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("next", next));
        if (limit != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AddonAuthToken", "PersonalAccessToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams,
                localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call buildCertificateListValidateBeforeCall(String appSlug, String next, Integer limit,
            final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException {
        // verify the required parameter 'appSlug' is set
        if (appSlug == null) {
            throw new ApiException("Missing the required parameter 'appSlug' when calling buildCertificateList(Async)");
        }

        com.squareup.okhttp.Call call = buildCertificateListCall(appSlug, next, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a list of the build certificates
     * List all the build certificates that have been uploaded to a specific app. Read more in our [Listing the uploaded iOS code signing files of an app](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#listing-the-uploaded-ios-code-signing-files-of-an-app) guide.
     *
     * @param appSlug App slug (required)
     * @param next    Slug of the first build certificate in the response (optional)
     * @param limit   Max number of build certificates per page is 50. (optional)
     * @return V0BuildCertificateListResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V0BuildCertificateListResponseModel buildCertificateList(String appSlug, String next, Integer limit) throws ApiException {
        ApiResponse<V0BuildCertificateListResponseModel> resp = buildCertificateListWithHttpInfo(appSlug, next, limit);
        return resp.getData();
    }

    /**
     * Get a list of the build certificates
     * List all the build certificates that have been uploaded to a specific app. Read more in our [Listing the uploaded iOS code signing files of an app](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#listing-the-uploaded-ios-code-signing-files-of-an-app) guide.
     *
     * @param appSlug App slug (required)
     * @param next    Slug of the first build certificate in the response (optional)
     * @param limit   Max number of build certificates per page is 50. (optional)
     * @return ApiResponse&lt;V0BuildCertificateListResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V0BuildCertificateListResponseModel> buildCertificateListWithHttpInfo(String appSlug, String next, Integer limit)
            throws ApiException {
        com.squareup.okhttp.Call call = buildCertificateListValidateBeforeCall(appSlug, next, limit, null, null);
        Type localVarReturnType = new TypeToken<V0BuildCertificateListResponseModel>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of the build certificates (asynchronously)
     * List all the build certificates that have been uploaded to a specific app. Read more in our [Listing the uploaded iOS code signing files of an app](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#listing-the-uploaded-ios-code-signing-files-of-an-app) guide.
     *
     * @param appSlug  App slug (required)
     * @param next     Slug of the first build certificate in the response (optional)
     * @param limit    Max number of build certificates per page is 50. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call buildCertificateListAsync(String appSlug, String next, Integer limit,
            final ApiCallback<V0BuildCertificateListResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = buildCertificateListValidateBeforeCall(appSlug, next, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V0BuildCertificateListResponseModel>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for buildCertificateShow
     *
     * @param appSlug                 App slug (required)
     * @param buildCertificateSlug    Build certificate slug (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call buildCertificateShowCall(String appSlug, String buildCertificateSlug,
            final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{app-slug}/build-certificates/{build-certificate-slug}"
                .replaceAll("\\{" + "app-slug" + "\\}", apiClient.escapeString(appSlug))
                .replaceAll("\\{" + "build-certificate-slug" + "\\}", apiClient.escapeString(buildCertificateSlug));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PersonalAccessToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams,
                localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call buildCertificateShowValidateBeforeCall(String appSlug, String buildCertificateSlug,
            final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException {
        // verify the required parameter 'appSlug' is set
        if (appSlug == null) {
            throw new ApiException("Missing the required parameter 'appSlug' when calling buildCertificateShow(Async)");
        }
        // verify the required parameter 'buildCertificateSlug' is set
        if (buildCertificateSlug == null) {
            throw new ApiException("Missing the required parameter 'buildCertificateSlug' when calling buildCertificateShow(Async)");
        }

        com.squareup.okhttp.Call call = buildCertificateShowCall(appSlug, buildCertificateSlug, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a specific build certificate
     * Retrieve data of a specific build certificate. You can fetch the build certificate slug for this endpoint if you first call the [GET /apps/{app-slug}/build-certificates](https://api-docs.bitrise.io/#/build-certificate/build-certificate-list) endpoint to list all available build certificates of an app. Read more in our [Getting a specific iOS code signing file&#x27;s data](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#getting-a-specific-ios-code-signing-files-data) guide.
     *
     * @param appSlug              App slug (required)
     * @param buildCertificateSlug Build certificate slug (required)
     * @return V0BuildCertificateResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V0BuildCertificateResponseModel buildCertificateShow(String appSlug, String buildCertificateSlug) throws ApiException {
        ApiResponse<V0BuildCertificateResponseModel> resp = buildCertificateShowWithHttpInfo(appSlug, buildCertificateSlug);
        return resp.getData();
    }

    /**
     * Get a specific build certificate
     * Retrieve data of a specific build certificate. You can fetch the build certificate slug for this endpoint if you first call the [GET /apps/{app-slug}/build-certificates](https://api-docs.bitrise.io/#/build-certificate/build-certificate-list) endpoint to list all available build certificates of an app. Read more in our [Getting a specific iOS code signing file&#x27;s data](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#getting-a-specific-ios-code-signing-files-data) guide.
     *
     * @param appSlug              App slug (required)
     * @param buildCertificateSlug Build certificate slug (required)
     * @return ApiResponse&lt;V0BuildCertificateResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V0BuildCertificateResponseModel> buildCertificateShowWithHttpInfo(String appSlug, String buildCertificateSlug)
            throws ApiException {
        com.squareup.okhttp.Call call = buildCertificateShowValidateBeforeCall(appSlug, buildCertificateSlug, null, null);
        Type localVarReturnType = new TypeToken<V0BuildCertificateResponseModel>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a specific build certificate (asynchronously)
     * Retrieve data of a specific build certificate. You can fetch the build certificate slug for this endpoint if you first call the [GET /apps/{app-slug}/build-certificates](https://api-docs.bitrise.io/#/build-certificate/build-certificate-list) endpoint to list all available build certificates of an app. Read more in our [Getting a specific iOS code signing file&#x27;s data](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#getting-a-specific-ios-code-signing-files-data) guide.
     *
     * @param appSlug              App slug (required)
     * @param buildCertificateSlug Build certificate slug (required)
     * @param callback             The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call buildCertificateShowAsync(String appSlug, String buildCertificateSlug,
            final ApiCallback<V0BuildCertificateResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = buildCertificateShowValidateBeforeCall(appSlug, buildCertificateSlug, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<V0BuildCertificateResponseModel>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for buildCertificateUpdate
     *
     * @param body                    Build certificate parameters (required)
     * @param appSlug                 App slug (required)
     * @param buildCertificateSlug    Build certificate slug (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call buildCertificateUpdateCall(V0BuildCertificateUpdateParams body, String appSlug, String buildCertificateSlug,
            final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/apps/{app-slug}/build-certificates/{build-certificate-slug}"
                .replaceAll("\\{" + "app-slug" + "\\}", apiClient.escapeString(appSlug))
                .replaceAll("\\{" + "build-certificate-slug" + "\\}", apiClient.escapeString(buildCertificateSlug));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PersonalAccessToken" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams,
                localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call buildCertificateUpdateValidateBeforeCall(V0BuildCertificateUpdateParams body, String appSlug,
            String buildCertificateSlug, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling buildCertificateUpdate(Async)");
        }
        // verify the required parameter 'appSlug' is set
        if (appSlug == null) {
            throw new ApiException("Missing the required parameter 'appSlug' when calling buildCertificateUpdate(Async)");
        }
        // verify the required parameter 'buildCertificateSlug' is set
        if (buildCertificateSlug == null) {
            throw new ApiException("Missing the required parameter 'buildCertificateSlug' when calling buildCertificateUpdate(Async)");
        }

        com.squareup.okhttp.Call call = buildCertificateUpdateCall(body, appSlug, buildCertificateSlug, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a build certificate
     * Update an uploaded build certificate&#x27;s attributes. You can fetch the build certificate slug for this endpoint if you first call the [GET /apps/{app-slug}/build-certificates](https://api-docs.bitrise.io/#/build-certificate/build-certificate-list) endpoint. Read more in our [Updating an uploaded iOS code signing file](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#confirming-the-ios-code-signing-file-upload) guide.
     *
     * @param body                 Build certificate parameters (required)
     * @param appSlug              App slug (required)
     * @param buildCertificateSlug Build certificate slug (required)
     * @return V0BuildCertificateResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V0BuildCertificateResponseModel buildCertificateUpdate(V0BuildCertificateUpdateParams body, String appSlug, String buildCertificateSlug)
            throws ApiException {
        ApiResponse<V0BuildCertificateResponseModel> resp = buildCertificateUpdateWithHttpInfo(body, appSlug, buildCertificateSlug);
        return resp.getData();
    }

    /**
     * Update a build certificate
     * Update an uploaded build certificate&#x27;s attributes. You can fetch the build certificate slug for this endpoint if you first call the [GET /apps/{app-slug}/build-certificates](https://api-docs.bitrise.io/#/build-certificate/build-certificate-list) endpoint. Read more in our [Updating an uploaded iOS code signing file](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#confirming-the-ios-code-signing-file-upload) guide.
     *
     * @param body                 Build certificate parameters (required)
     * @param appSlug              App slug (required)
     * @param buildCertificateSlug Build certificate slug (required)
     * @return ApiResponse&lt;V0BuildCertificateResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V0BuildCertificateResponseModel> buildCertificateUpdateWithHttpInfo(V0BuildCertificateUpdateParams body, String appSlug,
            String buildCertificateSlug) throws ApiException {
        com.squareup.okhttp.Call call = buildCertificateUpdateValidateBeforeCall(body, appSlug, buildCertificateSlug, null, null);
        Type localVarReturnType = new TypeToken<V0BuildCertificateResponseModel>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a build certificate (asynchronously)
     * Update an uploaded build certificate&#x27;s attributes. You can fetch the build certificate slug for this endpoint if you first call the [GET /apps/{app-slug}/build-certificates](https://api-docs.bitrise.io/#/build-certificate/build-certificate-list) endpoint. Read more in our [Updating an uploaded iOS code signing file](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#confirming-the-ios-code-signing-file-upload) guide.
     *
     * @param body                 Build certificate parameters (required)
     * @param appSlug              App slug (required)
     * @param buildCertificateSlug Build certificate slug (required)
     * @param callback             The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call buildCertificateUpdateAsync(V0BuildCertificateUpdateParams body, String appSlug, String buildCertificateSlug,
            final ApiCallback<V0BuildCertificateResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = buildCertificateUpdateValidateBeforeCall(body, appSlug, buildCertificateSlug, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<V0BuildCertificateResponseModel>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
