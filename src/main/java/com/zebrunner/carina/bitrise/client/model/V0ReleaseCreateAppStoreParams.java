/*
 * Bitrise API
 * Official REST API for Bitrise.io
 *
 * OpenAPI spec version: 0.1
 * Contact: letsconnect@bitrise.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.zebrunner.carina.bitrise.client.model;

import com.google.gson.annotations.SerializedName;

import java.util.Objects;

/**
 * V0ReleaseCreateAppStoreParams
 */

public class V0ReleaseCreateAppStoreParams {
    @SerializedName("automatic_testflight_upload")
    private Boolean automaticTestflightUpload = null;

    @SerializedName("bundle_id")
    private String bundleId = null;

    @SerializedName("description")
    private String description = null;

    @SerializedName("name")
    private String name = null;

    @SerializedName("release_branch")
    private String releaseBranch = null;

    @SerializedName("slack_webhook_url")
    private String slackWebhookUrl = null;

    @SerializedName("teams_webhook_url")
    private String teamsWebhookUrl = null;

    @SerializedName("workflow")
    private String workflow = null;

    public V0ReleaseCreateAppStoreParams automaticTestflightUpload(Boolean automaticTestflightUpload) {
        this.automaticTestflightUpload = automaticTestflightUpload;
        return this;
    }

    /**
     * @return automaticTestflightUpload
     * @deprecated use &#x60;automatic_store_upload&#x60; instead. Indicates whether or not to upload every release candidate build automatically to TestFlight (default: &#x60;false&#x60;)
     **/

    public Boolean isAutomaticTestflightUpload() {
        return automaticTestflightUpload;
    }

    public void setAutomaticTestflightUpload(Boolean automaticTestflightUpload) {
        this.automaticTestflightUpload = automaticTestflightUpload;
    }

    public V0ReleaseCreateAppStoreParams bundleId(String bundleId) {
        this.bundleId = bundleId;
        return this;
    }

    /**
     * The bundle ID of the app to be released
     *
     * @return bundleId
     **/

    public String getBundleId() {
        return bundleId;
    }

    public void setBundleId(String bundleId) {
        this.bundleId = bundleId;
    }

    public V0ReleaseCreateAppStoreParams description(String description) {
        this.description = description;
        return this;
    }

    /**
     * An internal description of the release; it won&#x27;t be propagated to the App Store (default: empty)
     *
     * @return description
     **/

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public V0ReleaseCreateAppStoreParams name(String name) {
        this.name = name;
        return this;
    }

    /**
     * The name/version of the release (e.g. &#x60;1.2&#x60;)
     *
     * @return name
     **/

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public V0ReleaseCreateAppStoreParams releaseBranch(String releaseBranch) {
        this.releaseBranch = releaseBranch;
        return this;
    }

    /**
     * The branch used for building the release candidate (default: empty)
     *
     * @return releaseBranch
     **/

    public String getReleaseBranch() {
        return releaseBranch;
    }

    public void setReleaseBranch(String releaseBranch) {
        this.releaseBranch = releaseBranch;
    }

    public V0ReleaseCreateAppStoreParams slackWebhookUrl(String slackWebhookUrl) {
        this.slackWebhookUrl = slackWebhookUrl;
        return this;
    }

    /**
     * The Slack webhook URL to use for sending Slack notifications (default: empty)
     *
     * @return slackWebhookUrl
     **/

    public String getSlackWebhookUrl() {
        return slackWebhookUrl;
    }

    public void setSlackWebhookUrl(String slackWebhookUrl) {
        this.slackWebhookUrl = slackWebhookUrl;
    }

    public V0ReleaseCreateAppStoreParams teamsWebhookUrl(String teamsWebhookUrl) {
        this.teamsWebhookUrl = teamsWebhookUrl;
        return this;
    }

    /**
     * The Teams webhook URL to use for sending MS Teams notifications (default: empty)
     *
     * @return teamsWebhookUrl
     **/

    public String getTeamsWebhookUrl() {
        return teamsWebhookUrl;
    }

    public void setTeamsWebhookUrl(String teamsWebhookUrl) {
        this.teamsWebhookUrl = teamsWebhookUrl;
    }

    public V0ReleaseCreateAppStoreParams workflow(String workflow) {
        this.workflow = workflow;
        return this;
    }

    /**
     * The workflow used for building the release candidate (default: empty)
     *
     * @return workflow
     **/

    public String getWorkflow() {
        return workflow;
    }

    public void setWorkflow(String workflow) {
        this.workflow = workflow;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V0ReleaseCreateAppStoreParams v0ReleaseCreateAppStoreParams = (V0ReleaseCreateAppStoreParams) o;
        return Objects.equals(this.automaticTestflightUpload, v0ReleaseCreateAppStoreParams.automaticTestflightUpload) &&
                Objects.equals(this.bundleId, v0ReleaseCreateAppStoreParams.bundleId) &&
                Objects.equals(this.description, v0ReleaseCreateAppStoreParams.description) &&
                Objects.equals(this.name, v0ReleaseCreateAppStoreParams.name) &&
                Objects.equals(this.releaseBranch, v0ReleaseCreateAppStoreParams.releaseBranch) &&
                Objects.equals(this.slackWebhookUrl, v0ReleaseCreateAppStoreParams.slackWebhookUrl) &&
                Objects.equals(this.teamsWebhookUrl, v0ReleaseCreateAppStoreParams.teamsWebhookUrl) &&
                Objects.equals(this.workflow, v0ReleaseCreateAppStoreParams.workflow);
    }

    @Override
    public int hashCode() {
        return Objects.hash(automaticTestflightUpload, bundleId, description, name, releaseBranch, slackWebhookUrl, teamsWebhookUrl, workflow);
    }

    @Override
    public String toString() {

        String sb = "class V0ReleaseCreateAppStoreParams {\n"
                + "    automaticTestflightUpload: " + toIndentedString(automaticTestflightUpload) + "\n"
                + "    bundleId: " + toIndentedString(bundleId) + "\n"
                + "    description: " + toIndentedString(description) + "\n"
                + "    name: " + toIndentedString(name) + "\n"
                + "    releaseBranch: " + toIndentedString(releaseBranch) + "\n"
                + "    slackWebhookUrl: " + toIndentedString(slackWebhookUrl) + "\n"
                + "    teamsWebhookUrl: " + toIndentedString(teamsWebhookUrl) + "\n"
                + "    workflow: " + toIndentedString(workflow) + "\n"
                + "}";
        return sb;
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
