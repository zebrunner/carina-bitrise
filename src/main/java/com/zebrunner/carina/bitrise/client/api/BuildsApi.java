/*
 * Bitrise API
 * Official REST API for Bitrise.io
 *
 * OpenAPI spec version: 0.1
 * Contact: letsconnect@bitrise.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.zebrunner.carina.bitrise.client.api;

import com.google.gson.reflect.TypeToken;
import com.zebrunner.carina.bitrise.client.ApiCallback;
import com.zebrunner.carina.bitrise.client.ApiClient;
import com.zebrunner.carina.bitrise.client.ApiException;
import com.zebrunner.carina.bitrise.client.ApiResponse;
import com.zebrunner.carina.bitrise.client.Configuration;
import com.zebrunner.carina.bitrise.client.Pair;
import com.zebrunner.carina.bitrise.client.ProgressRequestBody;
import com.zebrunner.carina.bitrise.client.ProgressResponseBody;
import com.zebrunner.carina.bitrise.client.model.V0ArchivedBuildListResponseModel;
import com.zebrunner.carina.bitrise.client.model.V0BuildAbortParams;
import com.zebrunner.carina.bitrise.client.model.V0BuildAbortResponseModel;
import com.zebrunner.carina.bitrise.client.model.V0BuildListAllResponseModel;
import com.zebrunner.carina.bitrise.client.model.V0BuildListResponseModel;
import com.zebrunner.carina.bitrise.client.model.V0BuildShowResponseModel;
import com.zebrunner.carina.bitrise.client.model.V0BuildTriggerParams;
import com.zebrunner.carina.bitrise.client.model.V0BuildTriggerRespModel;
import com.zebrunner.carina.bitrise.client.model.V0BuildWorkflowListResponseModel;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BuildsApi {
    private ApiClient apiClient;

    public BuildsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BuildsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for archivedBuildsList
     *
     * @param appSlug                 App slug (required)
     * @param after                   Listed builds should only be the ones which ran after the given date (Unix Timestamp) (required)
     * @param before                  Listed builds should only be the ones which ran before the given date (Unix Timestamp) (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call archivedBuildsListCall(String appSlug, Integer after, Integer before,
            final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{app-slug}/archived-builds"
                .replaceAll("\\{" + "app-slug" + "\\}", apiClient.escapeString(appSlug));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (after != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("after", after));
        if (before != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("before", before));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AddonAuthToken", "PersonalAccessToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams,
                localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call archivedBuildsListValidateBeforeCall(String appSlug, Integer after, Integer before,
            final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException {
        // verify the required parameter 'appSlug' is set
        if (appSlug == null) {
            throw new ApiException("Missing the required parameter 'appSlug' when calling archivedBuildsList(Async)");
        }
        // verify the required parameter 'after' is set
        if (after == null) {
            throw new ApiException("Missing the required parameter 'after' when calling archivedBuildsList(Async)");
        }
        // verify the required parameter 'before' is set
        if (before == null) {
            throw new ApiException("Missing the required parameter 'before' when calling archivedBuildsList(Async)");
        }

        com.squareup.okhttp.Call call = archivedBuildsListCall(appSlug, after, before, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List 1000 archived builds of an app
     * List the first 1000 archived builds of a specified Bitrise app. Set parameters to filter builds:
     *
     * @param appSlug App slug (required)
     * @param after   Listed builds should only be the ones which ran after the given date (Unix Timestamp) (required)
     * @param before  Listed builds should only be the ones which ran before the given date (Unix Timestamp) (required)
     * @return V0ArchivedBuildListResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V0ArchivedBuildListResponseModel archivedBuildsList(String appSlug, Integer after, Integer before) throws ApiException {
        ApiResponse<V0ArchivedBuildListResponseModel> resp = archivedBuildsListWithHttpInfo(appSlug, after, before);
        return resp.getData();
    }

    /**
     * List 1000 archived builds of an app
     * List the first 1000 archived builds of a specified Bitrise app. Set parameters to filter builds:
     *
     * @param appSlug App slug (required)
     * @param after   Listed builds should only be the ones which ran after the given date (Unix Timestamp) (required)
     * @param before  Listed builds should only be the ones which ran before the given date (Unix Timestamp) (required)
     * @return ApiResponse&lt;V0ArchivedBuildListResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V0ArchivedBuildListResponseModel> archivedBuildsListWithHttpInfo(String appSlug, Integer after, Integer before)
            throws ApiException {
        com.squareup.okhttp.Call call = archivedBuildsListValidateBeforeCall(appSlug, after, before, null, null);
        Type localVarReturnType = new TypeToken<V0ArchivedBuildListResponseModel>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List 1000 archived builds of an app (asynchronously)
     * List the first 1000 archived builds of a specified Bitrise app. Set parameters to filter builds:
     *
     * @param appSlug  App slug (required)
     * @param after    Listed builds should only be the ones which ran after the given date (Unix Timestamp) (required)
     * @param before   Listed builds should only be the ones which ran before the given date (Unix Timestamp) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call archivedBuildsListAsync(String appSlug, Integer after, Integer before,
            final ApiCallback<V0ArchivedBuildListResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = archivedBuildsListValidateBeforeCall(appSlug, after, before, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V0ArchivedBuildListResponseModel>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for buildAbort
     *
     * @param body                    Build abort parameters (required)
     * @param appSlug                 App slug (required)
     * @param buildSlug               Build slug (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call buildAbortCall(V0BuildAbortParams body, String appSlug, String buildSlug,
            final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/apps/{app-slug}/builds/{build-slug}/abort"
                .replaceAll("\\{" + "app-slug" + "\\}", apiClient.escapeString(appSlug))
                .replaceAll("\\{" + "build-slug" + "\\}", apiClient.escapeString(buildSlug));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AddonAuthToken", "PersonalAccessToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams,
                localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call buildAbortValidateBeforeCall(V0BuildAbortParams body, String appSlug, String buildSlug,
            final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling buildAbort(Async)");
        }
        // verify the required parameter 'appSlug' is set
        if (appSlug == null) {
            throw new ApiException("Missing the required parameter 'appSlug' when calling buildAbort(Async)");
        }
        // verify the required parameter 'buildSlug' is set
        if (buildSlug == null) {
            throw new ApiException("Missing the required parameter 'buildSlug' when calling buildAbort(Async)");
        }

        com.squareup.okhttp.Call call = buildAbortCall(body, appSlug, buildSlug, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Abort a specific build
     * Abort a specific build. Set an abort reason with the &#x60;abort_reason&#x60; parameter. Use the &#x60;abort_with_success&#x60; parameter to abort a build but still count it as a successful one.
     *
     * @param body      Build abort parameters (required)
     * @param appSlug   App slug (required)
     * @param buildSlug Build slug (required)
     * @return V0BuildAbortResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V0BuildAbortResponseModel buildAbort(V0BuildAbortParams body, String appSlug, String buildSlug) throws ApiException {
        ApiResponse<V0BuildAbortResponseModel> resp = buildAbortWithHttpInfo(body, appSlug, buildSlug);
        return resp.getData();
    }

    /**
     * Abort a specific build
     * Abort a specific build. Set an abort reason with the &#x60;abort_reason&#x60; parameter. Use the &#x60;abort_with_success&#x60; parameter to abort a build but still count it as a successful one.
     *
     * @param body      Build abort parameters (required)
     * @param appSlug   App slug (required)
     * @param buildSlug Build slug (required)
     * @return ApiResponse&lt;V0BuildAbortResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V0BuildAbortResponseModel> buildAbortWithHttpInfo(V0BuildAbortParams body, String appSlug, String buildSlug)
            throws ApiException {
        com.squareup.okhttp.Call call = buildAbortValidateBeforeCall(body, appSlug, buildSlug, null, null);
        Type localVarReturnType = new TypeToken<V0BuildAbortResponseModel>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Abort a specific build (asynchronously)
     * Abort a specific build. Set an abort reason with the &#x60;abort_reason&#x60; parameter. Use the &#x60;abort_with_success&#x60; parameter to abort a build but still count it as a successful one.
     *
     * @param body      Build abort parameters (required)
     * @param appSlug   App slug (required)
     * @param buildSlug Build slug (required)
     * @param callback  The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call buildAbortAsync(V0BuildAbortParams body, String appSlug, String buildSlug,
            final ApiCallback<V0BuildAbortResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = buildAbortValidateBeforeCall(body, appSlug, buildSlug, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V0BuildAbortResponseModel>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for buildBitriseYmlShow
     *
     * @param appSlug                 App slug (required)
     * @param buildSlug               Build slug (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call buildBitriseYmlShowCall(String appSlug, String buildSlug,
            final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{app-slug}/builds/{build-slug}/bitrise.yml"
                .replaceAll("\\{" + "app-slug" + "\\}", apiClient.escapeString(appSlug))
                .replaceAll("\\{" + "build-slug" + "\\}", apiClient.escapeString(buildSlug));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AddonAuthToken", "PersonalAccessToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams,
                localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call buildBitriseYmlShowValidateBeforeCall(String appSlug, String buildSlug,
            final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException {
        // verify the required parameter 'appSlug' is set
        if (appSlug == null) {
            throw new ApiException("Missing the required parameter 'appSlug' when calling buildBitriseYmlShow(Async)");
        }
        // verify the required parameter 'buildSlug' is set
        if (buildSlug == null) {
            throw new ApiException("Missing the required parameter 'buildSlug' when calling buildBitriseYmlShow(Async)");
        }

        com.squareup.okhttp.Call call = buildBitriseYmlShowCall(appSlug, buildSlug, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the bitrise.yml of a build
     * Get the bitrise.yml file of one of the builds of a given app. This will return the &#x60;bitrise.yml&#x60; configuration with which the build ran. You can compare it to [the current bitrise.yml configuration](https://api-docs.bitrise.io/#/application/app-config-datastore-show) of the app.
     *
     * @param appSlug   App slug (required)
     * @param buildSlug Build slug (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String buildBitriseYmlShow(String appSlug, String buildSlug) throws ApiException {
        ApiResponse<String> resp = buildBitriseYmlShowWithHttpInfo(appSlug, buildSlug);
        return resp.getData();
    }

    /**
     * Get the bitrise.yml of a build
     * Get the bitrise.yml file of one of the builds of a given app. This will return the &#x60;bitrise.yml&#x60; configuration with which the build ran. You can compare it to [the current bitrise.yml configuration](https://api-docs.bitrise.io/#/application/app-config-datastore-show) of the app.
     *
     * @param appSlug   App slug (required)
     * @param buildSlug Build slug (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> buildBitriseYmlShowWithHttpInfo(String appSlug, String buildSlug) throws ApiException {
        com.squareup.okhttp.Call call = buildBitriseYmlShowValidateBeforeCall(appSlug, buildSlug, null, null);
        Type localVarReturnType = new TypeToken<String>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the bitrise.yml of a build (asynchronously)
     * Get the bitrise.yml file of one of the builds of a given app. This will return the &#x60;bitrise.yml&#x60; configuration with which the build ran. You can compare it to [the current bitrise.yml configuration](https://api-docs.bitrise.io/#/application/app-config-datastore-show) of the app.
     *
     * @param appSlug   App slug (required)
     * @param buildSlug Build slug (required)
     * @param callback  The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call buildBitriseYmlShowAsync(String appSlug, String buildSlug, final ApiCallback<String> callback)
            throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = buildBitriseYmlShowValidateBeforeCall(appSlug, buildSlug, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for buildList
     *
     * @param appSlug                 App slug (required)
     * @param sortBy                  Order of builds: sort them based on when they were created or the time when they were triggered (optional)
     * @param branch                  The branch which was built (optional)
     * @param workflow                The name of the workflow used for the build (optional)
     * @param commitMessage           The commit message of the build (optional)
     * @param triggerEventType        The event that triggered the build (push, pull-request, tag) (optional)
     * @param pullRequestId           The id of the pull request that triggered the build (optional)
     * @param buildNumber             The build number (optional)
     * @param after                   List builds run after a given date (Unix Timestamp) (optional)
     * @param before                  List builds run before a given date (Unix Timestamp) (optional)
     * @param status                  The status of the build: not finished (0), successful (1), failed (2), aborted with failure (3), aborted with success (4) (optional)
     * @param isPipelineBuild         Whether the builds are part of a pipeline or not (optional)
     * @param next                    Slug of the first build in the response (optional)
     * @param limit                   Max number of elements per page (default: 50) (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call buildListCall(String appSlug, String sortBy, String branch, String workflow, String commitMessage,
            String triggerEventType, Integer pullRequestId, Integer buildNumber, Integer after, Integer before, Integer status,
            Boolean isPipelineBuild, String next, Integer limit, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{app-slug}/builds"
                .replaceAll("\\{" + "app-slug" + "\\}", apiClient.escapeString(appSlug));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sortBy != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("sort_by", sortBy));
        if (branch != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (workflow != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("workflow", workflow));
        if (commitMessage != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("commit_message", commitMessage));
        if (triggerEventType != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("trigger_event_type", triggerEventType));
        if (pullRequestId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("pull_request_id", pullRequestId));
        if (buildNumber != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("build_number", buildNumber));
        if (after != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("after", after));
        if (before != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("before", before));
        if (status != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (isPipelineBuild != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("is_pipeline_build", isPipelineBuild));
        if (next != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("next", next));
        if (limit != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AddonAuthToken", "PersonalAccessToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams,
                localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call buildListValidateBeforeCall(String appSlug, String sortBy, String branch, String workflow, String commitMessage,
            String triggerEventType, Integer pullRequestId, Integer buildNumber, Integer after, Integer before, Integer status,
            Boolean isPipelineBuild, String next, Integer limit, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'appSlug' is set
        if (appSlug == null) {
            throw new ApiException("Missing the required parameter 'appSlug' when calling buildList(Async)");
        }

        com.squareup.okhttp.Call call = buildListCall(appSlug, sortBy, branch, workflow, commitMessage, triggerEventType, pullRequestId, buildNumber,
                after, before, status, isPipelineBuild, next, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all builds of an app
     * List all the builds of a specified Bitrise app. Set parameters to filter builds: for example, you can search for builds run with a given workflow or all builds that were triggered by Pull Requests. It returns all the relevant data of the build.
     *
     * @param appSlug          App slug (required)
     * @param sortBy           Order of builds: sort them based on when they were created or the time when they were triggered (optional)
     * @param branch           The branch which was built (optional)
     * @param workflow         The name of the workflow used for the build (optional)
     * @param commitMessage    The commit message of the build (optional)
     * @param triggerEventType The event that triggered the build (push, pull-request, tag) (optional)
     * @param pullRequestId    The id of the pull request that triggered the build (optional)
     * @param buildNumber      The build number (optional)
     * @param after            List builds run after a given date (Unix Timestamp) (optional)
     * @param before           List builds run before a given date (Unix Timestamp) (optional)
     * @param status           The status of the build: not finished (0), successful (1), failed (2), aborted with failure (3), aborted with success (4) (optional)
     * @param isPipelineBuild  Whether the builds are part of a pipeline or not (optional)
     * @param next             Slug of the first build in the response (optional)
     * @param limit            Max number of elements per page (default: 50) (optional)
     * @return V0BuildListResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V0BuildListResponseModel buildList(String appSlug, String sortBy, String branch, String workflow, String commitMessage,
            String triggerEventType, Integer pullRequestId, Integer buildNumber, Integer after, Integer before, Integer status,
            Boolean isPipelineBuild, String next, Integer limit) throws ApiException {
        ApiResponse<V0BuildListResponseModel> resp = buildListWithHttpInfo(appSlug, sortBy, branch, workflow, commitMessage, triggerEventType,
                pullRequestId, buildNumber, after, before, status, isPipelineBuild, next, limit);
        return resp.getData();
    }

    /**
     * List all builds of an app
     * List all the builds of a specified Bitrise app. Set parameters to filter builds: for example, you can search for builds run with a given workflow or all builds that were triggered by Pull Requests. It returns all the relevant data of the build.
     *
     * @param appSlug          App slug (required)
     * @param sortBy           Order of builds: sort them based on when they were created or the time when they were triggered (optional)
     * @param branch           The branch which was built (optional)
     * @param workflow         The name of the workflow used for the build (optional)
     * @param commitMessage    The commit message of the build (optional)
     * @param triggerEventType The event that triggered the build (push, pull-request, tag) (optional)
     * @param pullRequestId    The id of the pull request that triggered the build (optional)
     * @param buildNumber      The build number (optional)
     * @param after            List builds run after a given date (Unix Timestamp) (optional)
     * @param before           List builds run before a given date (Unix Timestamp) (optional)
     * @param status           The status of the build: not finished (0), successful (1), failed (2), aborted with failure (3), aborted with success (4) (optional)
     * @param isPipelineBuild  Whether the builds are part of a pipeline or not (optional)
     * @param next             Slug of the first build in the response (optional)
     * @param limit            Max number of elements per page (default: 50) (optional)
     * @return ApiResponse&lt;V0BuildListResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V0BuildListResponseModel> buildListWithHttpInfo(String appSlug, String sortBy, String branch, String workflow,
            String commitMessage, String triggerEventType, Integer pullRequestId, Integer buildNumber, Integer after, Integer before, Integer status,
            Boolean isPipelineBuild, String next, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = buildListValidateBeforeCall(appSlug, sortBy, branch, workflow, commitMessage, triggerEventType, pullRequestId,
                buildNumber, after, before, status, isPipelineBuild, next, limit, null, null);
        Type localVarReturnType = new TypeToken<V0BuildListResponseModel>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all builds of an app (asynchronously)
     * List all the builds of a specified Bitrise app. Set parameters to filter builds: for example, you can search for builds run with a given workflow or all builds that were triggered by Pull Requests. It returns all the relevant data of the build.
     *
     * @param appSlug          App slug (required)
     * @param sortBy           Order of builds: sort them based on when they were created or the time when they were triggered (optional)
     * @param branch           The branch which was built (optional)
     * @param workflow         The name of the workflow used for the build (optional)
     * @param commitMessage    The commit message of the build (optional)
     * @param triggerEventType The event that triggered the build (push, pull-request, tag) (optional)
     * @param pullRequestId    The id of the pull request that triggered the build (optional)
     * @param buildNumber      The build number (optional)
     * @param after            List builds run after a given date (Unix Timestamp) (optional)
     * @param before           List builds run before a given date (Unix Timestamp) (optional)
     * @param status           The status of the build: not finished (0), successful (1), failed (2), aborted with failure (3), aborted with success (4) (optional)
     * @param isPipelineBuild  Whether the builds are part of a pipeline or not (optional)
     * @param next             Slug of the first build in the response (optional)
     * @param limit            Max number of elements per page (default: 50) (optional)
     * @param callback         The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call buildListAsync(String appSlug, String sortBy, String branch, String workflow, String commitMessage,
            String triggerEventType, Integer pullRequestId, Integer buildNumber, Integer after, Integer before, Integer status,
            Boolean isPipelineBuild, String next, Integer limit, final ApiCallback<V0BuildListResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = buildListValidateBeforeCall(appSlug, sortBy, branch, workflow, commitMessage, triggerEventType, pullRequestId,
                buildNumber, after, before, status, isPipelineBuild, next, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V0BuildListResponseModel>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for buildListAll
     *
     * @param ownerSlug               The slug of the owner of the app or apps (optional)
     * @param isOnHold                Indicates whether the build has started yet (true: the build hasn&#x27;t started) (optional)
     * @param status                  The status of the build: not finished (0), successful (1), failed (2), aborted with failure (3), aborted with success (4) (optional)
     * @param next                    Slug of the first build in the response (optional)
     * @param limit                   Max number of elements per page (default: 50) (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call buildListAllCall(String ownerSlug, Boolean isOnHold, Integer status, String next, Integer limit,
            final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/builds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ownerSlug != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("owner_slug", ownerSlug));
        if (isOnHold != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("is_on_hold", isOnHold));
        if (status != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (next != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("next", next));
        if (limit != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PersonalAccessToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams,
                localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call buildListAllValidateBeforeCall(String ownerSlug, Boolean isOnHold, Integer status, String next, Integer limit,
            final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException {

        com.squareup.okhttp.Call call = buildListAllCall(ownerSlug, isOnHold, status, next, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all builds
     * List all the Bitrise builds that can be accessed with the authenticated account. Filter builds based on their owner, using the owner slug, or the status of the build.
     *
     * @param ownerSlug The slug of the owner of the app or apps (optional)
     * @param isOnHold  Indicates whether the build has started yet (true: the build hasn&#x27;t started) (optional)
     * @param status    The status of the build: not finished (0), successful (1), failed (2), aborted with failure (3), aborted with success (4) (optional)
     * @param next      Slug of the first build in the response (optional)
     * @param limit     Max number of elements per page (default: 50) (optional)
     * @return V0BuildListAllResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V0BuildListAllResponseModel buildListAll(String ownerSlug, Boolean isOnHold, Integer status, String next, Integer limit)
            throws ApiException {
        ApiResponse<V0BuildListAllResponseModel> resp = buildListAllWithHttpInfo(ownerSlug, isOnHold, status, next, limit);
        return resp.getData();
    }

    /**
     * List all builds
     * List all the Bitrise builds that can be accessed with the authenticated account. Filter builds based on their owner, using the owner slug, or the status of the build.
     *
     * @param ownerSlug The slug of the owner of the app or apps (optional)
     * @param isOnHold  Indicates whether the build has started yet (true: the build hasn&#x27;t started) (optional)
     * @param status    The status of the build: not finished (0), successful (1), failed (2), aborted with failure (3), aborted with success (4) (optional)
     * @param next      Slug of the first build in the response (optional)
     * @param limit     Max number of elements per page (default: 50) (optional)
     * @return ApiResponse&lt;V0BuildListAllResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V0BuildListAllResponseModel> buildListAllWithHttpInfo(String ownerSlug, Boolean isOnHold, Integer status, String next,
            Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = buildListAllValidateBeforeCall(ownerSlug, isOnHold, status, next, limit, null, null);
        Type localVarReturnType = new TypeToken<V0BuildListAllResponseModel>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all builds (asynchronously)
     * List all the Bitrise builds that can be accessed with the authenticated account. Filter builds based on their owner, using the owner slug, or the status of the build.
     *
     * @param ownerSlug The slug of the owner of the app or apps (optional)
     * @param isOnHold  Indicates whether the build has started yet (true: the build hasn&#x27;t started) (optional)
     * @param status    The status of the build: not finished (0), successful (1), failed (2), aborted with failure (3), aborted with success (4) (optional)
     * @param next      Slug of the first build in the response (optional)
     * @param limit     Max number of elements per page (default: 50) (optional)
     * @param callback  The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call buildListAllAsync(String ownerSlug, Boolean isOnHold, Integer status, String next, Integer limit,
            final ApiCallback<V0BuildListAllResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = buildListAllValidateBeforeCall(ownerSlug, isOnHold, status, next, limit, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<V0BuildListAllResponseModel>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for buildLog
     *
     * @param appSlug                 App slug (required)
     * @param buildSlug               Build slug (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call buildLogCall(String appSlug, String buildSlug, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{app-slug}/builds/{build-slug}/log"
                .replaceAll("\\{" + "app-slug" + "\\}", apiClient.escapeString(appSlug))
                .replaceAll("\\{" + "build-slug" + "\\}", apiClient.escapeString(buildSlug));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AddonAuthToken", "PersonalAccessToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams,
                localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call buildLogValidateBeforeCall(String appSlug, String buildSlug,
            final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException {
        // verify the required parameter 'appSlug' is set
        if (appSlug == null) {
            throw new ApiException("Missing the required parameter 'appSlug' when calling buildLog(Async)");
        }
        // verify the required parameter 'buildSlug' is set
        if (buildSlug == null) {
            throw new ApiException("Missing the required parameter 'buildSlug' when calling buildLog(Async)");
        }

        com.squareup.okhttp.Call call = buildLogCall(appSlug, buildSlug, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the build log of a build
     * Get the build log of a specified build of a Bitrise app. You can get the build slug either by calling the [/builds](https://api-docs.bitrise.io/#/builds/build-list) endpoint or by clicking on the build on bitrise.io and copying the slug from the URL. Preview of the log is returned in &#x60;log_chunks&#x60; field in JSON format. You can download the full raw log in txt by using the signed url returned in &#x60;expiring_raw_log_url&#x60;. Be aware that this url is expiring in 10 minutes!
     *
     * @param appSlug   App slug (required)
     * @param buildSlug Build slug (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void buildLog(String appSlug, String buildSlug) throws ApiException {
        buildLogWithHttpInfo(appSlug, buildSlug);
    }

    /**
     * Get the build log of a build
     * Get the build log of a specified build of a Bitrise app. You can get the build slug either by calling the [/builds](https://api-docs.bitrise.io/#/builds/build-list) endpoint or by clicking on the build on bitrise.io and copying the slug from the URL. Preview of the log is returned in &#x60;log_chunks&#x60; field in JSON format. You can download the full raw log in txt by using the signed url returned in &#x60;expiring_raw_log_url&#x60;. Be aware that this url is expiring in 10 minutes!
     *
     * @param appSlug   App slug (required)
     * @param buildSlug Build slug (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> buildLogWithHttpInfo(String appSlug, String buildSlug) throws ApiException {
        com.squareup.okhttp.Call call = buildLogValidateBeforeCall(appSlug, buildSlug, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get the build log of a build (asynchronously)
     * Get the build log of a specified build of a Bitrise app. You can get the build slug either by calling the [/builds](https://api-docs.bitrise.io/#/builds/build-list) endpoint or by clicking on the build on bitrise.io and copying the slug from the URL. Preview of the log is returned in &#x60;log_chunks&#x60; field in JSON format. You can download the full raw log in txt by using the signed url returned in &#x60;expiring_raw_log_url&#x60;. Be aware that this url is expiring in 10 minutes!
     *
     * @param appSlug   App slug (required)
     * @param buildSlug Build slug (required)
     * @param callback  The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call buildLogAsync(String appSlug, String buildSlug, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = buildLogValidateBeforeCall(appSlug, buildSlug, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for buildShow
     *
     * @param appSlug                 App slug (required)
     * @param buildSlug               Build slug (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call buildShowCall(String appSlug, String buildSlug, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{app-slug}/builds/{build-slug}"
                .replaceAll("\\{" + "app-slug" + "\\}", apiClient.escapeString(appSlug))
                .replaceAll("\\{" + "build-slug" + "\\}", apiClient.escapeString(buildSlug));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AddonAuthToken", "PersonalAccessToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams,
                localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call buildShowValidateBeforeCall(String appSlug, String buildSlug,
            final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException {
        // verify the required parameter 'appSlug' is set
        if (appSlug == null) {
            throw new ApiException("Missing the required parameter 'appSlug' when calling buildShow(Async)");
        }
        // verify the required parameter 'buildSlug' is set
        if (buildSlug == null) {
            throw new ApiException("Missing the required parameter 'buildSlug' when calling buildShow(Async)");
        }

        com.squareup.okhttp.Call call = buildShowCall(appSlug, buildSlug, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a build of a given app
     * Get the specified build of a given Bitrise app. You need to provide both an app slug and a build slug. You can get the build slug either by calling the [/builds](https://api-docs.bitrise.io/#/builds/build-list) endpoint or by clicking on the build on bitrise.io and copying the slug from the URL. The endpoint returns all the relevant data of the build.
     *
     * @param appSlug   App slug (required)
     * @param buildSlug Build slug (required)
     * @return V0BuildShowResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V0BuildShowResponseModel buildShow(String appSlug, String buildSlug) throws ApiException {
        ApiResponse<V0BuildShowResponseModel> resp = buildShowWithHttpInfo(appSlug, buildSlug);
        return resp.getData();
    }

    /**
     * Get a build of a given app
     * Get the specified build of a given Bitrise app. You need to provide both an app slug and a build slug. You can get the build slug either by calling the [/builds](https://api-docs.bitrise.io/#/builds/build-list) endpoint or by clicking on the build on bitrise.io and copying the slug from the URL. The endpoint returns all the relevant data of the build.
     *
     * @param appSlug   App slug (required)
     * @param buildSlug Build slug (required)
     * @return ApiResponse&lt;V0BuildShowResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V0BuildShowResponseModel> buildShowWithHttpInfo(String appSlug, String buildSlug) throws ApiException {
        com.squareup.okhttp.Call call = buildShowValidateBeforeCall(appSlug, buildSlug, null, null);
        Type localVarReturnType = new TypeToken<V0BuildShowResponseModel>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a build of a given app (asynchronously)
     * Get the specified build of a given Bitrise app. You need to provide both an app slug and a build slug. You can get the build slug either by calling the [/builds](https://api-docs.bitrise.io/#/builds/build-list) endpoint or by clicking on the build on bitrise.io and copying the slug from the URL. The endpoint returns all the relevant data of the build.
     *
     * @param appSlug   App slug (required)
     * @param buildSlug Build slug (required)
     * @param callback  The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call buildShowAsync(String appSlug, String buildSlug, final ApiCallback<V0BuildShowResponseModel> callback)
            throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = buildShowValidateBeforeCall(appSlug, buildSlug, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V0BuildShowResponseModel>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for buildTrigger
     *
     * @param body                    Build trigger parameters (required)
     * @param appSlug                 App slug (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call buildTriggerCall(V0BuildTriggerParams body, String appSlug,
            final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/apps/{app-slug}/builds"
                .replaceAll("\\{" + "app-slug" + "\\}", apiClient.escapeString(appSlug));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AddonAuthToken", "PersonalAccessToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams,
                localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call buildTriggerValidateBeforeCall(V0BuildTriggerParams body, String appSlug,
            final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling buildTrigger(Async)");
        }
        // verify the required parameter 'appSlug' is set
        if (appSlug == null) {
            throw new ApiException("Missing the required parameter 'appSlug' when calling buildTrigger(Async)");
        }

        com.squareup.okhttp.Call call = buildTriggerCall(body, appSlug, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Trigger a new build/pipeline
     * Trigger a new build/pipeline. Specify an app slug and at least one parameter out of three: a git tag or git commit hash, a branch, or a workflow/pipeline ID. You can also set specific parameters for Pull Request builds/pipelines and define additional environment variables for your build/pipeline. [Check out our detailed guide](https://devcenter.bitrise.io/api/build-trigger/).
     *
     * @param body    Build trigger parameters (required)
     * @param appSlug App slug (required)
     * @return V0BuildTriggerRespModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V0BuildTriggerRespModel buildTrigger(V0BuildTriggerParams body, String appSlug) throws ApiException {
        ApiResponse<V0BuildTriggerRespModel> resp = buildTriggerWithHttpInfo(body, appSlug);
        return resp.getData();
    }

    /**
     * Trigger a new build/pipeline
     * Trigger a new build/pipeline. Specify an app slug and at least one parameter out of three: a git tag or git commit hash, a branch, or a workflow/pipeline ID. You can also set specific parameters for Pull Request builds/pipelines and define additional environment variables for your build/pipeline. [Check out our detailed guide](https://devcenter.bitrise.io/api/build-trigger/).
     *
     * @param body    Build trigger parameters (required)
     * @param appSlug App slug (required)
     * @return ApiResponse&lt;V0BuildTriggerRespModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V0BuildTriggerRespModel> buildTriggerWithHttpInfo(V0BuildTriggerParams body, String appSlug) throws ApiException {
        com.squareup.okhttp.Call call = buildTriggerValidateBeforeCall(body, appSlug, null, null);
        Type localVarReturnType = new TypeToken<V0BuildTriggerRespModel>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Trigger a new build/pipeline (asynchronously)
     * Trigger a new build/pipeline. Specify an app slug and at least one parameter out of three: a git tag or git commit hash, a branch, or a workflow/pipeline ID. You can also set specific parameters for Pull Request builds/pipelines and define additional environment variables for your build/pipeline. [Check out our detailed guide](https://devcenter.bitrise.io/api/build-trigger/).
     *
     * @param body     Build trigger parameters (required)
     * @param appSlug  App slug (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call buildTriggerAsync(V0BuildTriggerParams body, String appSlug, final ApiCallback<V0BuildTriggerRespModel> callback)
            throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = buildTriggerValidateBeforeCall(body, appSlug, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V0BuildTriggerRespModel>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for buildWorkflowList
     *
     * @param appSlug                 App slug (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call buildWorkflowListCall(String appSlug, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{app-slug}/build-workflows"
                .replaceAll("\\{" + "app-slug" + "\\}", apiClient.escapeString(appSlug));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AddonAuthToken", "PersonalAccessToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams,
                localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call buildWorkflowListValidateBeforeCall(String appSlug, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'appSlug' is set
        if (appSlug == null) {
            throw new ApiException("Missing the required parameter 'appSlug' when calling buildWorkflowList(Async)");
        }

        com.squareup.okhttp.Call call = buildWorkflowListCall(appSlug, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List the workflows of an app
     * List the workflows that were triggered at any time for a given Bitrise app. Note that it might list workflows that are currently not defined in the app&#x27;s &#x60;bitrise.yml&#x60; configuration - and conversely, workflows that were never triggered will not be listed even if they are defined in the &#x60;bitrise.yml&#x60; file.
     *
     * @param appSlug App slug (required)
     * @return V0BuildWorkflowListResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V0BuildWorkflowListResponseModel buildWorkflowList(String appSlug) throws ApiException {
        ApiResponse<V0BuildWorkflowListResponseModel> resp = buildWorkflowListWithHttpInfo(appSlug);
        return resp.getData();
    }

    /**
     * List the workflows of an app
     * List the workflows that were triggered at any time for a given Bitrise app. Note that it might list workflows that are currently not defined in the app&#x27;s &#x60;bitrise.yml&#x60; configuration - and conversely, workflows that were never triggered will not be listed even if they are defined in the &#x60;bitrise.yml&#x60; file.
     *
     * @param appSlug App slug (required)
     * @return ApiResponse&lt;V0BuildWorkflowListResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V0BuildWorkflowListResponseModel> buildWorkflowListWithHttpInfo(String appSlug) throws ApiException {
        com.squareup.okhttp.Call call = buildWorkflowListValidateBeforeCall(appSlug, null, null);
        Type localVarReturnType = new TypeToken<V0BuildWorkflowListResponseModel>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List the workflows of an app (asynchronously)
     * List the workflows that were triggered at any time for a given Bitrise app. Note that it might list workflows that are currently not defined in the app&#x27;s &#x60;bitrise.yml&#x60; configuration - and conversely, workflows that were never triggered will not be listed even if they are defined in the &#x60;bitrise.yml&#x60; file.
     *
     * @param appSlug  App slug (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call buildWorkflowListAsync(String appSlug, final ApiCallback<V0BuildWorkflowListResponseModel> callback)
            throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = buildWorkflowListValidateBeforeCall(appSlug, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V0BuildWorkflowListResponseModel>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
