/*
 * Bitrise API
 * Official REST API for Bitrise.io
 *
 * OpenAPI spec version: 0.1
 * Contact: letsconnect@bitrise.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.zebrunner.carina.bitrise.client.model;

import com.google.gson.annotations.SerializedName;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * V0AppFinishParams
 */

public class V0AppFinishParams {
    @SerializedName("config")
    private String config = null;

    @SerializedName("envs")
    private Map<String, String> envs = null;

    @SerializedName("mode")
    private String mode = null;

    @SerializedName("organization_slug")
    private String organizationSlug = null;

    @SerializedName("project_type")
    private String projectType = null;

    @SerializedName("stack_id")
    private String stackId = null;

    public V0AppFinishParams config(String config) {
        this.config = config;
        return this;
    }

    /**
     * Which config to use. Specify a config that matches your project type (e. g. &#x60;default-android-config&#x60; for &#x60;android&#x60;, etc.). If not speficied, default value is &#x60;other-config&#x60;. The available values are &#x60;default-android-config&#x60;, &#x60;default-cordova-config&#x60;, &#x60;default-fastlane-android-config&#x60;, &#x60;default-fastlane-ios-config&#x60;, &#x60;flutter-config-notest-app-android&#x60;, &#x60;flutter-config-notest-app-both&#x60;, &#x60;flutter-config-notest-app-ios&#x60;, &#x60;flutter-config-test-app-android&#x60;, &#x60;flutter-config-test-app-both&#x60;, &#x60;flutter-config-test-app-ios&#x60;, &#x60;default-ionic-config&#x60;, &#x60;default-ios-config&#x60;, &#x60;default-macos-config&#x60;, &#x60;default-react-native-config&#x60;, &#x60;default-react-native-expo-config&#x60;, &#x60;other-config&#x60;.
     *
     * @return config
     **/

    public String getConfig() {
        return config;
    }

    public void setConfig(String config) {
        this.config = config;
    }

    public V0AppFinishParams envs(Map<String, String> envs) {
        this.envs = envs;
        return this;
    }

    public V0AppFinishParams putEnvsItem(String key, String envsItem) {
        if (this.envs == null) {
            this.envs = new HashMap<String, String>();
        }
        this.envs.put(key, envsItem);
        return this;
    }

    /**
     * Environment variables for the application workflows, e.g. {\&quot;env1\&quot;:\&quot;val1\&quot;,\&quot;env2\&quot;:\&quot;val2\&quot;}
     *
     * @return envs
     **/

    public Map<String, String> getEnvs() {
        return envs;
    }

    public void setEnvs(Map<String, String> envs) {
        this.envs = envs;
    }

    public V0AppFinishParams mode(String mode) {
        this.mode = mode;
        return this;
    }

    /**
     * config specification mode, has to be specified with &#x60;manual&#x60; value
     *
     * @return mode
     **/

    public String getMode() {
        return mode;
    }

    public void setMode(String mode) {
        this.mode = mode;
    }

    public V0AppFinishParams organizationSlug(String organizationSlug) {
        this.organizationSlug = organizationSlug;
        return this;
    }

    /**
     * The slug of the organization, who will be the owner of the application, if it&#x27;s not specified, then the authenticated user will be the owner
     *
     * @return organizationSlug
     **/

    public String getOrganizationSlug() {
        return organizationSlug;
    }

    public void setOrganizationSlug(String organizationSlug) {
        this.organizationSlug = organizationSlug;
    }

    public V0AppFinishParams projectType(String projectType) {
        this.projectType = projectType;
        return this;
    }

    /**
     * The type of your project (&#x60;android&#x60;, &#x60;ios&#x60;, &#x60;cordova&#x60;, &#x60;other&#x60;, &#x60;xamarin&#x60;, &#x60;macos&#x60;, &#x60;ionic&#x60;, &#x60;react-native&#x60;, &#x60;fastlane&#x60;, null)
     *
     * @return projectType
     **/

    public String getProjectType() {
        return projectType;
    }

    public void setProjectType(String projectType) {
        this.projectType = projectType;
    }

    public V0AppFinishParams stackId(String stackId) {
        this.stackId = stackId;
        return this;
    }

    /**
     * The id of the stack the application will be built (these can be found in the [system report](https://github.com/bitrise-io/bitrise.io/tree/master/system_reports) file names)
     *
     * @return stackId
     **/

    public String getStackId() {
        return stackId;
    }

    public void setStackId(String stackId) {
        this.stackId = stackId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V0AppFinishParams v0AppFinishParams = (V0AppFinishParams) o;
        return Objects.equals(this.config, v0AppFinishParams.config) &&
                Objects.equals(this.envs, v0AppFinishParams.envs) &&
                Objects.equals(this.mode, v0AppFinishParams.mode) &&
                Objects.equals(this.organizationSlug, v0AppFinishParams.organizationSlug) &&
                Objects.equals(this.projectType, v0AppFinishParams.projectType) &&
                Objects.equals(this.stackId, v0AppFinishParams.stackId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(config, envs, mode, organizationSlug, projectType, stackId);
    }

    @Override
    public String toString() {

        String sb = "class V0AppFinishParams {\n"
                + "    config: " + toIndentedString(config) + "\n"
                + "    envs: " + toIndentedString(envs) + "\n"
                + "    mode: " + toIndentedString(mode) + "\n"
                + "    organizationSlug: " + toIndentedString(organizationSlug) + "\n"
                + "    projectType: " + toIndentedString(projectType) + "\n"
                + "    stackId: " + toIndentedString(stackId) + "\n"
                + "}";
        return sb;
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
