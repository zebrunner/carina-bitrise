/*
 * Bitrise API
 * Official REST API for Bitrise.io
 *
 * OpenAPI spec version: 0.1
 * Contact: letsconnect@bitrise.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.zebrunner.carina.bitrise.client.model;

import com.google.gson.annotations.SerializedName;

import java.util.Objects;

/**
 * V0ReleaseCreateGooglePlayParams
 */

public class V0ReleaseCreateGooglePlayParams {
    @SerializedName("automatic_play_console_upload")
    private Boolean automaticPlayConsoleUpload = null;

    @SerializedName("description")
    private String description = null;

    @SerializedName("name")
    private String name = null;

    @SerializedName("package_name")
    private String packageName = null;

    @SerializedName("release_branch")
    private String releaseBranch = null;

    @SerializedName("slack_webhook_url")
    private String slackWebhookUrl = null;

    @SerializedName("teams_webhook_url")
    private String teamsWebhookUrl = null;

    @SerializedName("workflow")
    private String workflow = null;

    public V0ReleaseCreateGooglePlayParams automaticPlayConsoleUpload(Boolean automaticPlayConsoleUpload) {
        this.automaticPlayConsoleUpload = automaticPlayConsoleUpload;
        return this;
    }

    /**
     * Indicates whether or not to upload every release candidate build automatically to the Google Play Console (default: &#x60;false&#x60;)
     *
     * @return automaticPlayConsoleUpload
     **/

    public Boolean isAutomaticPlayConsoleUpload() {
        return automaticPlayConsoleUpload;
    }

    public void setAutomaticPlayConsoleUpload(Boolean automaticPlayConsoleUpload) {
        this.automaticPlayConsoleUpload = automaticPlayConsoleUpload;
    }

    public V0ReleaseCreateGooglePlayParams description(String description) {
        this.description = description;
        return this;
    }

    /**
     * An internal description of the release; it won&#x27;t be propagated to the App Store (default: empty)
     *
     * @return description
     **/

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public V0ReleaseCreateGooglePlayParams name(String name) {
        this.name = name;
        return this;
    }

    /**
     * The name/version of the release (e.g. &#x60;1.2&#x60;)
     *
     * @return name
     **/

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public V0ReleaseCreateGooglePlayParams packageName(String packageName) {
        this.packageName = packageName;
        return this;
    }

    /**
     * The package name of the app to be released
     *
     * @return packageName
     **/

    public String getPackageName() {
        return packageName;
    }

    public void setPackageName(String packageName) {
        this.packageName = packageName;
    }

    public V0ReleaseCreateGooglePlayParams releaseBranch(String releaseBranch) {
        this.releaseBranch = releaseBranch;
        return this;
    }

    /**
     * The branch used for building the release candidate (default: empty)
     *
     * @return releaseBranch
     **/

    public String getReleaseBranch() {
        return releaseBranch;
    }

    public void setReleaseBranch(String releaseBranch) {
        this.releaseBranch = releaseBranch;
    }

    public V0ReleaseCreateGooglePlayParams slackWebhookUrl(String slackWebhookUrl) {
        this.slackWebhookUrl = slackWebhookUrl;
        return this;
    }

    /**
     * The Slack webhook URL to use for sending Slack notifications (default: empty)
     *
     * @return slackWebhookUrl
     **/

    public String getSlackWebhookUrl() {
        return slackWebhookUrl;
    }

    public void setSlackWebhookUrl(String slackWebhookUrl) {
        this.slackWebhookUrl = slackWebhookUrl;
    }

    public V0ReleaseCreateGooglePlayParams teamsWebhookUrl(String teamsWebhookUrl) {
        this.teamsWebhookUrl = teamsWebhookUrl;
        return this;
    }

    /**
     * The Teams webhook URL to use for sending MS Teams notifications (default: empty)
     *
     * @return teamsWebhookUrl
     **/

    public String getTeamsWebhookUrl() {
        return teamsWebhookUrl;
    }

    public void setTeamsWebhookUrl(String teamsWebhookUrl) {
        this.teamsWebhookUrl = teamsWebhookUrl;
    }

    public V0ReleaseCreateGooglePlayParams workflow(String workflow) {
        this.workflow = workflow;
        return this;
    }

    /**
     * The workflow used for building the release candidate (default: empty)
     *
     * @return workflow
     **/

    public String getWorkflow() {
        return workflow;
    }

    public void setWorkflow(String workflow) {
        this.workflow = workflow;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V0ReleaseCreateGooglePlayParams v0ReleaseCreateGooglePlayParams = (V0ReleaseCreateGooglePlayParams) o;
        return Objects.equals(this.automaticPlayConsoleUpload, v0ReleaseCreateGooglePlayParams.automaticPlayConsoleUpload) &&
                Objects.equals(this.description, v0ReleaseCreateGooglePlayParams.description) &&
                Objects.equals(this.name, v0ReleaseCreateGooglePlayParams.name) &&
                Objects.equals(this.packageName, v0ReleaseCreateGooglePlayParams.packageName) &&
                Objects.equals(this.releaseBranch, v0ReleaseCreateGooglePlayParams.releaseBranch) &&
                Objects.equals(this.slackWebhookUrl, v0ReleaseCreateGooglePlayParams.slackWebhookUrl) &&
                Objects.equals(this.teamsWebhookUrl, v0ReleaseCreateGooglePlayParams.teamsWebhookUrl) &&
                Objects.equals(this.workflow, v0ReleaseCreateGooglePlayParams.workflow);
    }

    @Override
    public int hashCode() {
        return Objects.hash(automaticPlayConsoleUpload, description, name, packageName, releaseBranch, slackWebhookUrl, teamsWebhookUrl, workflow);
    }

    @Override
    public String toString() {

        String sb = "class V0ReleaseCreateGooglePlayParams {\n"
                + "    automaticPlayConsoleUpload: " + toIndentedString(automaticPlayConsoleUpload) + "\n"
                + "    description: " + toIndentedString(description) + "\n"
                + "    name: " + toIndentedString(name) + "\n"
                + "    packageName: " + toIndentedString(packageName) + "\n"
                + "    releaseBranch: " + toIndentedString(releaseBranch) + "\n"
                + "    slackWebhookUrl: " + toIndentedString(slackWebhookUrl) + "\n"
                + "    teamsWebhookUrl: " + toIndentedString(teamsWebhookUrl) + "\n"
                + "    workflow: " + toIndentedString(workflow) + "\n"
                + "}";
        return sb;
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
