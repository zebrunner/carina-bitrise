/*
 * Bitrise API
 * Official REST API for Bitrise.io
 *
 * OpenAPI spec version: 0.1
 * Contact: letsconnect@bitrise.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.zebrunner.carina.bitrise.client.api;

import com.google.gson.reflect.TypeToken;
import com.zebrunner.carina.bitrise.client.ApiCallback;
import com.zebrunner.carina.bitrise.client.ApiClient;
import com.zebrunner.carina.bitrise.client.ApiException;
import com.zebrunner.carina.bitrise.client.ApiResponse;
import com.zebrunner.carina.bitrise.client.Configuration;
import com.zebrunner.carina.bitrise.client.Pair;
import com.zebrunner.carina.bitrise.client.ProgressRequestBody;
import com.zebrunner.carina.bitrise.client.ProgressResponseBody;
import com.zebrunner.carina.bitrise.client.model.V0AppSecretGetValueResponse;
import com.zebrunner.carina.bitrise.client.model.V0AppSecretListResponse;
import com.zebrunner.carina.bitrise.client.model.V0AppSecretUpsertParams;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SecretsApi {
    private ApiClient apiClient;

    public SecretsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SecretsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for secretDelete
     *
     * @param appSlug                 App slug (required)
     * @param secretName              Secret name (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call secretDeleteCall(String appSlug, String secretName, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{app-slug}/secrets/{secret-name}"
                .replaceAll("\\{" + "app-slug" + "\\}", apiClient.escapeString(appSlug))
                .replaceAll("\\{" + "secret-name" + "\\}", apiClient.escapeString(secretName));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PersonalAccessToken" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams,
                localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call secretDeleteValidateBeforeCall(String appSlug, String secretName,
            final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException {
        // verify the required parameter 'appSlug' is set
        if (appSlug == null) {
            throw new ApiException("Missing the required parameter 'appSlug' when calling secretDelete(Async)");
        }
        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling secretDelete(Async)");
        }

        com.squareup.okhttp.Call call = secretDeleteCall(appSlug, secretName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an application secret
     * Delete an application secret. Requires administrator level privileges to the app.
     *
     * @param appSlug    App slug (required)
     * @param secretName Secret name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void secretDelete(String appSlug, String secretName) throws ApiException {
        secretDeleteWithHttpInfo(appSlug, secretName);
    }

    /**
     * Delete an application secret
     * Delete an application secret. Requires administrator level privileges to the app.
     *
     * @param appSlug    App slug (required)
     * @param secretName Secret name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> secretDeleteWithHttpInfo(String appSlug, String secretName) throws ApiException {
        com.squareup.okhttp.Call call = secretDeleteValidateBeforeCall(appSlug, secretName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an application secret (asynchronously)
     * Delete an application secret. Requires administrator level privileges to the app.
     *
     * @param appSlug    App slug (required)
     * @param secretName Secret name (required)
     * @param callback   The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call secretDeleteAsync(String appSlug, String secretName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = secretDeleteValidateBeforeCall(appSlug, secretName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for secretList
     *
     * @param appSlug                 App slug (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call secretListCall(String appSlug, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{app-slug}/secrets"
                .replaceAll("\\{" + "app-slug" + "\\}", apiClient.escapeString(appSlug));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PersonalAccessToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams,
                localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call secretListValidateBeforeCall(String appSlug, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'appSlug' is set
        if (appSlug == null) {
            throw new ApiException("Missing the required parameter 'appSlug' when calling secretList(Async)");
        }

        com.squareup.okhttp.Call call = secretListCall(appSlug, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List the application secrets (with no values)
     * List the application secrets (with no values). Requires administrator level privileges to the app.
     *
     * @param appSlug App slug (required)
     * @return V0AppSecretListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V0AppSecretListResponse secretList(String appSlug) throws ApiException {
        ApiResponse<V0AppSecretListResponse> resp = secretListWithHttpInfo(appSlug);
        return resp.getData();
    }

    /**
     * List the application secrets (with no values)
     * List the application secrets (with no values). Requires administrator level privileges to the app.
     *
     * @param appSlug App slug (required)
     * @return ApiResponse&lt;V0AppSecretListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V0AppSecretListResponse> secretListWithHttpInfo(String appSlug) throws ApiException {
        com.squareup.okhttp.Call call = secretListValidateBeforeCall(appSlug, null, null);
        Type localVarReturnType = new TypeToken<V0AppSecretListResponse>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List the application secrets (with no values) (asynchronously)
     * List the application secrets (with no values). Requires administrator level privileges to the app.
     *
     * @param appSlug  App slug (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call secretListAsync(String appSlug, final ApiCallback<V0AppSecretListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = secretListValidateBeforeCall(appSlug, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V0AppSecretListResponse>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for secretUpsert
     *
     * @param body                    Secret parameters (required)
     * @param appSlug                 App slug (required)
     * @param secretName              Secret name (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call secretUpsertCall(V0AppSecretUpsertParams body, String appSlug, String secretName,
            final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/apps/{app-slug}/secrets/{secret-name}"
                .replaceAll("\\{" + "app-slug" + "\\}", apiClient.escapeString(appSlug))
                .replaceAll("\\{" + "secret-name" + "\\}", apiClient.escapeString(secretName));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PersonalAccessToken" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams,
                localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call secretUpsertValidateBeforeCall(V0AppSecretUpsertParams body, String appSlug, String secretName,
            final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling secretUpsert(Async)");
        }
        // verify the required parameter 'appSlug' is set
        if (appSlug == null) {
            throw new ApiException("Missing the required parameter 'appSlug' when calling secretUpsert(Async)");
        }
        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling secretUpsert(Async)");
        }

        com.squareup.okhttp.Call call = secretUpsertCall(body, appSlug, secretName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Upsert an application secret
     * Upsert an application secret. Requires administrator level privileges to the app.
     *
     * @param body       Secret parameters (required)
     * @param appSlug    App slug (required)
     * @param secretName Secret name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void secretUpsert(V0AppSecretUpsertParams body, String appSlug, String secretName) throws ApiException {
        secretUpsertWithHttpInfo(body, appSlug, secretName);
    }

    /**
     * Upsert an application secret
     * Upsert an application secret. Requires administrator level privileges to the app.
     *
     * @param body       Secret parameters (required)
     * @param appSlug    App slug (required)
     * @param secretName Secret name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> secretUpsertWithHttpInfo(V0AppSecretUpsertParams body, String appSlug, String secretName) throws ApiException {
        com.squareup.okhttp.Call call = secretUpsertValidateBeforeCall(body, appSlug, secretName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Upsert an application secret (asynchronously)
     * Upsert an application secret. Requires administrator level privileges to the app.
     *
     * @param body       Secret parameters (required)
     * @param appSlug    App slug (required)
     * @param secretName Secret name (required)
     * @param callback   The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call secretUpsertAsync(V0AppSecretUpsertParams body, String appSlug, String secretName,
            final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = secretUpsertValidateBeforeCall(body, appSlug, secretName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for secretValueGet
     *
     * @param appSlug                 App slug (required)
     * @param secretName              Secret name (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call secretValueGetCall(String appSlug, String secretName,
            final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{app-slug}/secrets/{secret-name}/value"
                .replaceAll("\\{" + "app-slug" + "\\}", apiClient.escapeString(appSlug))
                .replaceAll("\\{" + "secret-name" + "\\}", apiClient.escapeString(secretName));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PersonalAccessToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams,
                localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call secretValueGetValidateBeforeCall(String appSlug, String secretName,
            final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException {
        // verify the required parameter 'appSlug' is set
        if (appSlug == null) {
            throw new ApiException("Missing the required parameter 'appSlug' when calling secretValueGet(Async)");
        }
        // verify the required parameter 'secretName' is set
        if (secretName == null) {
            throw new ApiException("Missing the required parameter 'secretName' when calling secretValueGet(Async)");
        }

        com.squareup.okhttp.Call call = secretValueGetCall(appSlug, secretName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the value of an (unprotected) application secrets
     * Get the value of an (unprotected) application secrets. Requires administrator level privileges to the app.
     *
     * @param appSlug    App slug (required)
     * @param secretName Secret name (required)
     * @return V0AppSecretGetValueResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V0AppSecretGetValueResponse secretValueGet(String appSlug, String secretName) throws ApiException {
        ApiResponse<V0AppSecretGetValueResponse> resp = secretValueGetWithHttpInfo(appSlug, secretName);
        return resp.getData();
    }

    /**
     * Get the value of an (unprotected) application secrets
     * Get the value of an (unprotected) application secrets. Requires administrator level privileges to the app.
     *
     * @param appSlug    App slug (required)
     * @param secretName Secret name (required)
     * @return ApiResponse&lt;V0AppSecretGetValueResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V0AppSecretGetValueResponse> secretValueGetWithHttpInfo(String appSlug, String secretName) throws ApiException {
        com.squareup.okhttp.Call call = secretValueGetValidateBeforeCall(appSlug, secretName, null, null);
        Type localVarReturnType = new TypeToken<V0AppSecretGetValueResponse>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the value of an (unprotected) application secrets (asynchronously)
     * Get the value of an (unprotected) application secrets. Requires administrator level privileges to the app.
     *
     * @param appSlug    App slug (required)
     * @param secretName Secret name (required)
     * @param callback   The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call secretValueGetAsync(String appSlug, String secretName, final ApiCallback<V0AppSecretGetValueResponse> callback)
            throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = secretValueGetValidateBeforeCall(appSlug, secretName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V0AppSecretGetValueResponse>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
