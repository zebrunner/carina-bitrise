/*
 * Bitrise API
 * Official REST API for Bitrise.io
 *
 * OpenAPI spec version: 0.1
 * Contact: letsconnect@bitrise.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.zebrunner.carina.bitrise.client.api;

import com.google.gson.reflect.TypeToken;
import com.zebrunner.carina.bitrise.client.ApiCallback;
import com.zebrunner.carina.bitrise.client.ApiClient;
import com.zebrunner.carina.bitrise.client.ApiException;
import com.zebrunner.carina.bitrise.client.ApiResponse;
import com.zebrunner.carina.bitrise.client.Configuration;
import com.zebrunner.carina.bitrise.client.Pair;
import com.zebrunner.carina.bitrise.client.ProgressRequestBody;
import com.zebrunner.carina.bitrise.client.ProgressResponseBody;
import com.zebrunner.carina.bitrise.client.model.V0PipelineAbortParams;
import com.zebrunner.carina.bitrise.client.model.V0PipelineListAllResponseModel;
import com.zebrunner.carina.bitrise.client.model.V0PipelineListResponseModel;
import com.zebrunner.carina.bitrise.client.model.V0PipelineRebuildParams;
import com.zebrunner.carina.bitrise.client.model.V0PipelineShowResponseModel;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PipelinesApi {
    private ApiClient apiClient;

    public PipelinesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PipelinesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for pipelineAbort
     *
     * @param body                    Pipeline abort parameters (required)
     * @param appSlug                 App slug (required)
     * @param pipelineId              Pipeline id (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pipelineAbortCall(V0PipelineAbortParams body, String appSlug, String pipelineId,
            final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/apps/{app-slug}/pipelines/{pipeline-id}/abort"
                .replaceAll("\\{" + "app-slug" + "\\}", apiClient.escapeString(appSlug))
                .replaceAll("\\{" + "pipeline-id" + "\\}", apiClient.escapeString(pipelineId));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AddonAuthToken", "PersonalAccessToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams,
                localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pipelineAbortValidateBeforeCall(V0PipelineAbortParams body, String appSlug, String pipelineId,
            final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling pipelineAbort(Async)");
        }
        // verify the required parameter 'appSlug' is set
        if (appSlug == null) {
            throw new ApiException("Missing the required parameter 'appSlug' when calling pipelineAbort(Async)");
        }
        // verify the required parameter 'pipelineId' is set
        if (pipelineId == null) {
            throw new ApiException("Missing the required parameter 'pipelineId' when calling pipelineAbort(Async)");
        }

        com.squareup.okhttp.Call call = pipelineAbortCall(body, appSlug, pipelineId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Aborts a pipeline
     * Aborts a pipeline. You need to provide the app slug and the id of the pipeline. You can add an abort reason, choose to skip notifications and make the abort with success state.
     *
     * @param body       Pipeline abort parameters (required)
     * @param appSlug    App slug (required)
     * @param pipelineId Pipeline id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void pipelineAbort(V0PipelineAbortParams body, String appSlug, String pipelineId) throws ApiException {
        pipelineAbortWithHttpInfo(body, appSlug, pipelineId);
    }

    /**
     * Aborts a pipeline
     * Aborts a pipeline. You need to provide the app slug and the id of the pipeline. You can add an abort reason, choose to skip notifications and make the abort with success state.
     *
     * @param body       Pipeline abort parameters (required)
     * @param appSlug    App slug (required)
     * @param pipelineId Pipeline id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> pipelineAbortWithHttpInfo(V0PipelineAbortParams body, String appSlug, String pipelineId) throws ApiException {
        com.squareup.okhttp.Call call = pipelineAbortValidateBeforeCall(body, appSlug, pipelineId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Aborts a pipeline (asynchronously)
     * Aborts a pipeline. You need to provide the app slug and the id of the pipeline. You can add an abort reason, choose to skip notifications and make the abort with success state.
     *
     * @param body       Pipeline abort parameters (required)
     * @param appSlug    App slug (required)
     * @param pipelineId Pipeline id (required)
     * @param callback   The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pipelineAbortAsync(V0PipelineAbortParams body, String appSlug, String pipelineId,
            final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pipelineAbortValidateBeforeCall(body, appSlug, pipelineId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for pipelineList
     *
     * @param appSlug                 App slug (required)
     * @param after                   List pipelines/standalone builds run after a given date (RFC3339 time format) (optional)
     * @param before                  List pipelines/standalone builds run before a given date (RFC3339 time format) - was called &#x27;next&#x27; earlier (optional)
     * @param branch                  The branch which was built (optional)
     * @param buildNumber             The pipeline/standalone build number (optional)
     * @param commitMessage           The commit message of the pipeline/standalone build (optional)
     * @param limit                   Max number of elements per page - default: 10 (optional)
     * @param next                    List pipelines/standalone builds run before a given date (RFC3339 time format) - deprecated (optional)
     * @param pipeline                Name of the pipeline (optional)
     * @param status                  The status of the pipeline/standalone build: initializing, on_hold, running, succeeded, failed, aborted, succeeded_with_abort (optional)
     * @param triggerEventType        The event that triggered the pipeline/standalone build (push, pull-request, tag) (optional)
     * @param workflow                The name of the workflow used for the pipeline/standalone build (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pipelineListCall(String appSlug, String after, String before, String branch, Integer buildNumber,
            String commitMessage, Integer limit, String next, String pipeline, String status, String triggerEventType, String workflow,
            final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{app-slug}/pipelines"
                .replaceAll("\\{" + "app-slug" + "\\}", apiClient.escapeString(appSlug));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (after != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("after", after));
        if (before != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("before", before));
        if (branch != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("branch", branch));
        if (buildNumber != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("build_number", buildNumber));
        if (commitMessage != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("commit_message", commitMessage));
        if (limit != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (next != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("next", next));
        if (pipeline != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("pipeline", pipeline));
        if (status != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (triggerEventType != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("trigger_event_type", triggerEventType));
        if (workflow != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("workflow", workflow));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AddonAuthToken", "PersonalAccessToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams,
                localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pipelineListValidateBeforeCall(String appSlug, String after, String before, String branch, Integer buildNumber,
            String commitMessage, Integer limit, String next, String pipeline, String status, String triggerEventType, String workflow,
            final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException {
        // verify the required parameter 'appSlug' is set
        if (appSlug == null) {
            throw new ApiException("Missing the required parameter 'appSlug' when calling pipelineList(Async)");
        }

        com.squareup.okhttp.Call call = pipelineListCall(appSlug, after, before, branch, buildNumber, commitMessage, limit, next, pipeline, status,
                triggerEventType, workflow, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all pipelines and standalone builds of an app
     * List all the pipelines and standalone builds of a specified Bitrise app. Set parameters to filter pipelines: for example, you can search for pipelines/standalone builds run with a given workflow name or all pipelines/standalone builds that were triggered by Pull Requests. It returns all the relevant data of the pipelines/standalone builds.
     *
     * @param appSlug          App slug (required)
     * @param after            List pipelines/standalone builds run after a given date (RFC3339 time format) (optional)
     * @param before           List pipelines/standalone builds run before a given date (RFC3339 time format) - was called &#x27;next&#x27; earlier (optional)
     * @param branch           The branch which was built (optional)
     * @param buildNumber      The pipeline/standalone build number (optional)
     * @param commitMessage    The commit message of the pipeline/standalone build (optional)
     * @param limit            Max number of elements per page - default: 10 (optional)
     * @param next             List pipelines/standalone builds run before a given date (RFC3339 time format) - deprecated (optional)
     * @param pipeline         Name of the pipeline (optional)
     * @param status           The status of the pipeline/standalone build: initializing, on_hold, running, succeeded, failed, aborted, succeeded_with_abort (optional)
     * @param triggerEventType The event that triggered the pipeline/standalone build (push, pull-request, tag) (optional)
     * @param workflow         The name of the workflow used for the pipeline/standalone build (optional)
     * @return V0PipelineListResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V0PipelineListResponseModel pipelineList(String appSlug, String after, String before, String branch, Integer buildNumber,
            String commitMessage, Integer limit, String next, String pipeline, String status, String triggerEventType, String workflow)
            throws ApiException {
        ApiResponse<V0PipelineListResponseModel> resp = pipelineListWithHttpInfo(appSlug, after, before, branch, buildNumber, commitMessage, limit,
                next, pipeline, status, triggerEventType, workflow);
        return resp.getData();
    }

    /**
     * List all pipelines and standalone builds of an app
     * List all the pipelines and standalone builds of a specified Bitrise app. Set parameters to filter pipelines: for example, you can search for pipelines/standalone builds run with a given workflow name or all pipelines/standalone builds that were triggered by Pull Requests. It returns all the relevant data of the pipelines/standalone builds.
     *
     * @param appSlug          App slug (required)
     * @param after            List pipelines/standalone builds run after a given date (RFC3339 time format) (optional)
     * @param before           List pipelines/standalone builds run before a given date (RFC3339 time format) - was called &#x27;next&#x27; earlier (optional)
     * @param branch           The branch which was built (optional)
     * @param buildNumber      The pipeline/standalone build number (optional)
     * @param commitMessage    The commit message of the pipeline/standalone build (optional)
     * @param limit            Max number of elements per page - default: 10 (optional)
     * @param next             List pipelines/standalone builds run before a given date (RFC3339 time format) - deprecated (optional)
     * @param pipeline         Name of the pipeline (optional)
     * @param status           The status of the pipeline/standalone build: initializing, on_hold, running, succeeded, failed, aborted, succeeded_with_abort (optional)
     * @param triggerEventType The event that triggered the pipeline/standalone build (push, pull-request, tag) (optional)
     * @param workflow         The name of the workflow used for the pipeline/standalone build (optional)
     * @return ApiResponse&lt;V0PipelineListResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V0PipelineListResponseModel> pipelineListWithHttpInfo(String appSlug, String after, String before, String branch,
            Integer buildNumber, String commitMessage, Integer limit, String next, String pipeline, String status, String triggerEventType,
            String workflow) throws ApiException {
        com.squareup.okhttp.Call call = pipelineListValidateBeforeCall(appSlug, after, before, branch, buildNumber, commitMessage, limit, next,
                pipeline, status, triggerEventType, workflow, null, null);
        Type localVarReturnType = new TypeToken<V0PipelineListResponseModel>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all pipelines and standalone builds of an app (asynchronously)
     * List all the pipelines and standalone builds of a specified Bitrise app. Set parameters to filter pipelines: for example, you can search for pipelines/standalone builds run with a given workflow name or all pipelines/standalone builds that were triggered by Pull Requests. It returns all the relevant data of the pipelines/standalone builds.
     *
     * @param appSlug          App slug (required)
     * @param after            List pipelines/standalone builds run after a given date (RFC3339 time format) (optional)
     * @param before           List pipelines/standalone builds run before a given date (RFC3339 time format) - was called &#x27;next&#x27; earlier (optional)
     * @param branch           The branch which was built (optional)
     * @param buildNumber      The pipeline/standalone build number (optional)
     * @param commitMessage    The commit message of the pipeline/standalone build (optional)
     * @param limit            Max number of elements per page - default: 10 (optional)
     * @param next             List pipelines/standalone builds run before a given date (RFC3339 time format) - deprecated (optional)
     * @param pipeline         Name of the pipeline (optional)
     * @param status           The status of the pipeline/standalone build: initializing, on_hold, running, succeeded, failed, aborted, succeeded_with_abort (optional)
     * @param triggerEventType The event that triggered the pipeline/standalone build (push, pull-request, tag) (optional)
     * @param workflow         The name of the workflow used for the pipeline/standalone build (optional)
     * @param callback         The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pipelineListAsync(String appSlug, String after, String before, String branch, Integer buildNumber,
            String commitMessage, Integer limit, String next, String pipeline, String status, String triggerEventType, String workflow,
            final ApiCallback<V0PipelineListResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pipelineListValidateBeforeCall(appSlug, after, before, branch, buildNumber, commitMessage, limit, next,
                pipeline, status, triggerEventType, workflow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V0PipelineListResponseModel>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for pipelineListAll
     *
     * @param ownerSlug               The slug of the owner of the app or apps (optional)
     * @param status                  The status of the pipelines/standalone build: initializing, on_hold, running, succeeded, failed, aborted, succeeded_with_abort (optional)
     * @param next                    Getting pipelines/standalone builds before the given parameter (RFC3339 time format) (optional)
     * @param limit                   Max number of elements per page (default: 10) (optional)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pipelineListAllCall(String ownerSlug, Integer status, String next, Integer limit,
            final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pipelines";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ownerSlug != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("owner_slug", ownerSlug));
        if (status != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (next != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("next", next));
        if (limit != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PersonalAccessToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams,
                localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pipelineListAllValidateBeforeCall(String ownerSlug, Integer status, String next, Integer limit,
            final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException {

        com.squareup.okhttp.Call call = pipelineListAllCall(ownerSlug, status, next, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all pipelines/standalone builds
     * List all the Bitrise pipelines/standalone builds that can be accessed with the authenticated account. Filter pipelines/standalone builds based on their owner, using the owner slug, or the status of the pipeline/standalone build.
     *
     * @param ownerSlug The slug of the owner of the app or apps (optional)
     * @param status    The status of the pipelines/standalone build: initializing, on_hold, running, succeeded, failed, aborted, succeeded_with_abort (optional)
     * @param next      Getting pipelines/standalone builds before the given parameter (RFC3339 time format) (optional)
     * @param limit     Max number of elements per page (default: 10) (optional)
     * @return V0PipelineListAllResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V0PipelineListAllResponseModel pipelineListAll(String ownerSlug, Integer status, String next, Integer limit) throws ApiException {
        ApiResponse<V0PipelineListAllResponseModel> resp = pipelineListAllWithHttpInfo(ownerSlug, status, next, limit);
        return resp.getData();
    }

    /**
     * List all pipelines/standalone builds
     * List all the Bitrise pipelines/standalone builds that can be accessed with the authenticated account. Filter pipelines/standalone builds based on their owner, using the owner slug, or the status of the pipeline/standalone build.
     *
     * @param ownerSlug The slug of the owner of the app or apps (optional)
     * @param status    The status of the pipelines/standalone build: initializing, on_hold, running, succeeded, failed, aborted, succeeded_with_abort (optional)
     * @param next      Getting pipelines/standalone builds before the given parameter (RFC3339 time format) (optional)
     * @param limit     Max number of elements per page (default: 10) (optional)
     * @return ApiResponse&lt;V0PipelineListAllResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V0PipelineListAllResponseModel> pipelineListAllWithHttpInfo(String ownerSlug, Integer status, String next, Integer limit)
            throws ApiException {
        com.squareup.okhttp.Call call = pipelineListAllValidateBeforeCall(ownerSlug, status, next, limit, null, null);
        Type localVarReturnType = new TypeToken<V0PipelineListAllResponseModel>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all pipelines/standalone builds (asynchronously)
     * List all the Bitrise pipelines/standalone builds that can be accessed with the authenticated account. Filter pipelines/standalone builds based on their owner, using the owner slug, or the status of the pipeline/standalone build.
     *
     * @param ownerSlug The slug of the owner of the app or apps (optional)
     * @param status    The status of the pipelines/standalone build: initializing, on_hold, running, succeeded, failed, aborted, succeeded_with_abort (optional)
     * @param next      Getting pipelines/standalone builds before the given parameter (RFC3339 time format) (optional)
     * @param limit     Max number of elements per page (default: 10) (optional)
     * @param callback  The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pipelineListAllAsync(String ownerSlug, Integer status, String next, Integer limit,
            final ApiCallback<V0PipelineListAllResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pipelineListAllValidateBeforeCall(ownerSlug, status, next, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V0PipelineListAllResponseModel>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for pipelineRebuild
     *
     * @param body                    Pipeline rebuild parameters (required)
     * @param appSlug                 App slug (required)
     * @param pipelineId              Pipeline id (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pipelineRebuildCall(V0PipelineRebuildParams body, String appSlug, String pipelineId,
            final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/apps/{app-slug}/pipelines/{pipeline-id}/rebuild"
                .replaceAll("\\{" + "app-slug" + "\\}", apiClient.escapeString(appSlug))
                .replaceAll("\\{" + "pipeline-id" + "\\}", apiClient.escapeString(pipelineId));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PersonalAccessToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams,
                localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pipelineRebuildValidateBeforeCall(V0PipelineRebuildParams body, String appSlug, String pipelineId,
            final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling pipelineRebuild(Async)");
        }
        // verify the required parameter 'appSlug' is set
        if (appSlug == null) {
            throw new ApiException("Missing the required parameter 'appSlug' when calling pipelineRebuild(Async)");
        }
        // verify the required parameter 'pipelineId' is set
        if (pipelineId == null) {
            throw new ApiException("Missing the required parameter 'pipelineId' when calling pipelineRebuild(Async)");
        }

        com.squareup.okhttp.Call call = pipelineRebuildCall(body, appSlug, pipelineId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Rebuilds a pipeline
     * Rebuilds a pipeline. You can rebuild the whole pipeline or only the unsuccessful and subsequent workflows by setting the partial flag to true.
     *
     * @param body       Pipeline rebuild parameters (required)
     * @param appSlug    App slug (required)
     * @param pipelineId Pipeline id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void pipelineRebuild(V0PipelineRebuildParams body, String appSlug, String pipelineId) throws ApiException {
        pipelineRebuildWithHttpInfo(body, appSlug, pipelineId);
    }

    /**
     * Rebuilds a pipeline
     * Rebuilds a pipeline. You can rebuild the whole pipeline or only the unsuccessful and subsequent workflows by setting the partial flag to true.
     *
     * @param body       Pipeline rebuild parameters (required)
     * @param appSlug    App slug (required)
     * @param pipelineId Pipeline id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> pipelineRebuildWithHttpInfo(V0PipelineRebuildParams body, String appSlug, String pipelineId) throws ApiException {
        com.squareup.okhttp.Call call = pipelineRebuildValidateBeforeCall(body, appSlug, pipelineId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Rebuilds a pipeline (asynchronously)
     * Rebuilds a pipeline. You can rebuild the whole pipeline or only the unsuccessful and subsequent workflows by setting the partial flag to true.
     *
     * @param body       Pipeline rebuild parameters (required)
     * @param appSlug    App slug (required)
     * @param pipelineId Pipeline id (required)
     * @param callback   The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pipelineRebuildAsync(V0PipelineRebuildParams body, String appSlug, String pipelineId,
            final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pipelineRebuildValidateBeforeCall(body, appSlug, pipelineId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for pipelineShow
     *
     * @param appSlug                 App slug (required)
     * @param pipelineId              Pipeline id (required)
     * @param progressListener        Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pipelineShowCall(String appSlug, String pipelineId, final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{app-slug}/pipelines/{pipeline-id}"
                .replaceAll("\\{" + "app-slug" + "\\}", apiClient.escapeString(appSlug))
                .replaceAll("\\{" + "pipeline-id" + "\\}", apiClient.escapeString(pipelineId));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "AddonAuthToken", "PersonalAccessToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams,
                localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pipelineShowValidateBeforeCall(String appSlug, String pipelineId,
            final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException {
        // verify the required parameter 'appSlug' is set
        if (appSlug == null) {
            throw new ApiException("Missing the required parameter 'appSlug' when calling pipelineShow(Async)");
        }
        // verify the required parameter 'pipelineId' is set
        if (pipelineId == null) {
            throw new ApiException("Missing the required parameter 'pipelineId' when calling pipelineShow(Async)");
        }

        com.squareup.okhttp.Call call = pipelineShowCall(appSlug, pipelineId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a pipeline of a given app
     * Get the specified pipeline of a given Bitrise app. You need to provide both an app slug and a pipeline id. You can get the pipeline id either by calling the [/pipelines](https://api-docs.bitrise.io/#/pipelines/pipeline-list) endpoint or by clicking on the pipeline on bitrise.io and copying the id from the URL. The endpoint returns all the relevant data of the pipeline.
     *
     * @param appSlug    App slug (required)
     * @param pipelineId Pipeline id (required)
     * @return V0PipelineShowResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V0PipelineShowResponseModel pipelineShow(String appSlug, String pipelineId) throws ApiException {
        ApiResponse<V0PipelineShowResponseModel> resp = pipelineShowWithHttpInfo(appSlug, pipelineId);
        return resp.getData();
    }

    /**
     * Get a pipeline of a given app
     * Get the specified pipeline of a given Bitrise app. You need to provide both an app slug and a pipeline id. You can get the pipeline id either by calling the [/pipelines](https://api-docs.bitrise.io/#/pipelines/pipeline-list) endpoint or by clicking on the pipeline on bitrise.io and copying the id from the URL. The endpoint returns all the relevant data of the pipeline.
     *
     * @param appSlug    App slug (required)
     * @param pipelineId Pipeline id (required)
     * @return ApiResponse&lt;V0PipelineShowResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V0PipelineShowResponseModel> pipelineShowWithHttpInfo(String appSlug, String pipelineId) throws ApiException {
        com.squareup.okhttp.Call call = pipelineShowValidateBeforeCall(appSlug, pipelineId, null, null);
        Type localVarReturnType = new TypeToken<V0PipelineShowResponseModel>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a pipeline of a given app (asynchronously)
     * Get the specified pipeline of a given Bitrise app. You need to provide both an app slug and a pipeline id. You can get the pipeline id either by calling the [/pipelines](https://api-docs.bitrise.io/#/pipelines/pipeline-list) endpoint or by clicking on the pipeline on bitrise.io and copying the id from the URL. The endpoint returns all the relevant data of the pipeline.
     *
     * @param appSlug    App slug (required)
     * @param pipelineId Pipeline id (required)
     * @param callback   The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pipelineShowAsync(String appSlug, String pipelineId, final ApiCallback<V0PipelineShowResponseModel> callback)
            throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pipelineShowValidateBeforeCall(appSlug, pipelineId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V0PipelineShowResponseModel>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
