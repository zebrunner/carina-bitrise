/*
 * Bitrise API
 * Official REST API for Bitrise.io
 *
 * OpenAPI spec version: 0.1
 * Contact: letsconnect@bitrise.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.zebrunner.carina.bitrise.client.model;

import com.google.gson.annotations.SerializedName;

import java.util.Objects;

/**
 * V0AppUploadParams
 */

public class V0AppUploadParams {
    @SerializedName("default_branch_name")
    private String defaultBranchName = null;

    @SerializedName("git_owner")
    private String gitOwner = null;

    @SerializedName("git_repo_slug")
    private String gitRepoSlug = null;

    @SerializedName("is_public")
    private Boolean isPublic = null;

    @SerializedName("manual_approval_enabled")
    private Boolean manualApprovalEnabled = null;

    @SerializedName("organization_slug")
    private String organizationSlug = null;

    @SerializedName("provider")
    private String provider = null;

    @SerializedName("repo_url")
    private String repoUrl = null;

    @SerializedName("title")
    private String title = null;

    @SerializedName("type")
    private String type = null;

    public V0AppUploadParams defaultBranchName(String defaultBranchName) {
        this.defaultBranchName = defaultBranchName;
        return this;
    }

    /**
     * The default branch of the repository. If it&#x27;s not specified, it will be &#x60;master&#x60;.
     *
     * @return defaultBranchName
     **/

    public String getDefaultBranchName() {
        return defaultBranchName;
    }

    public void setDefaultBranchName(String defaultBranchName) {
        this.defaultBranchName = defaultBranchName;
    }

    public V0AppUploadParams gitOwner(String gitOwner) {
        this.gitOwner = gitOwner;
        return this;
    }

    /**
     * [Deprecated] You no longer need to provide this field.
     *
     * @return gitOwner
     **/

    public String getGitOwner() {
        return gitOwner;
    }

    public void setGitOwner(String gitOwner) {
        this.gitOwner = gitOwner;
    }

    public V0AppUploadParams gitRepoSlug(String gitRepoSlug) {
        this.gitRepoSlug = gitRepoSlug;
        return this;
    }

    /**
     * [Deprecated] You no longer need to provide this field.
     *
     * @return gitRepoSlug
     **/

    public String getGitRepoSlug() {
        return gitRepoSlug;
    }

    public void setGitRepoSlug(String gitRepoSlug) {
        this.gitRepoSlug = gitRepoSlug;
    }

    public V0AppUploadParams isPublic(Boolean isPublic) {
        this.isPublic = isPublic;
        return this;
    }

    /**
     * If &#x60;true&#x60; then the repository visibility setting will be public, in case of &#x60;false&#x60; it will be private
     *
     * @return isPublic
     **/

    public Boolean isIsPublic() {
        return isPublic;
    }

    public void setIsPublic(Boolean isPublic) {
        this.isPublic = isPublic;
    }

    public V0AppUploadParams manualApprovalEnabled(Boolean manualApprovalEnabled) {
        this.manualApprovalEnabled = manualApprovalEnabled;
        return this;
    }

    /**
     * Toggles whether manual approval should be enabled for the app&#x27;s builds. If it&#x27;s not specified, it will be &#x60;true&#x60;.
     *
     * @return manualApprovalEnabled
     **/

    public Boolean isManualApprovalEnabled() {
        return manualApprovalEnabled;
    }

    public void setManualApprovalEnabled(Boolean manualApprovalEnabled) {
        this.manualApprovalEnabled = manualApprovalEnabled;
    }

    public V0AppUploadParams organizationSlug(String organizationSlug) {
        this.organizationSlug = organizationSlug;
        return this;
    }

    /**
     * The slug of the organization, who will be the owner of the application. If it&#x27;s not specified, then the authenticated user will be the owner.
     *
     * @return organizationSlug
     **/

    public String getOrganizationSlug() {
        return organizationSlug;
    }

    public void setOrganizationSlug(String organizationSlug) {
        this.organizationSlug = organizationSlug;
    }

    public V0AppUploadParams provider(String provider) {
        this.provider = provider;
        return this;
    }

    /**
     * The git provider you are using, it can be &#x60;github&#x60;, &#x60;bitbucket&#x60;, &#x60;gitlab&#x60;, &#x60;gitlab-self-hosted&#x60; or &#x60;custom&#x60;
     *
     * @return provider
     **/

    public String getProvider() {
        return provider;
    }

    public void setProvider(String provider) {
        this.provider = provider;
    }

    public V0AppUploadParams repoUrl(String repoUrl) {
        this.repoUrl = repoUrl;
        return this;
    }

    /**
     * The URL of your repository
     *
     * @return repoUrl
     **/

    public String getRepoUrl() {
        return repoUrl;
    }

    public void setRepoUrl(String repoUrl) {
        this.repoUrl = repoUrl;
    }

    public V0AppUploadParams title(String title) {
        this.title = title;
        return this;
    }

    /**
     * The title of the application. If it&#x27;s not specified, it will be the git repository&#x27;s name.
     *
     * @return title
     **/

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public V0AppUploadParams type(String type) {
        this.type = type;
        return this;
    }

    /**
     * [Deprecated] You no longer need to provide this field.
     *
     * @return type
     **/

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        V0AppUploadParams v0AppUploadParams = (V0AppUploadParams) o;
        return Objects.equals(this.defaultBranchName, v0AppUploadParams.defaultBranchName) &&
                Objects.equals(this.gitOwner, v0AppUploadParams.gitOwner) &&
                Objects.equals(this.gitRepoSlug, v0AppUploadParams.gitRepoSlug) &&
                Objects.equals(this.isPublic, v0AppUploadParams.isPublic) &&
                Objects.equals(this.manualApprovalEnabled, v0AppUploadParams.manualApprovalEnabled) &&
                Objects.equals(this.organizationSlug, v0AppUploadParams.organizationSlug) &&
                Objects.equals(this.provider, v0AppUploadParams.provider) &&
                Objects.equals(this.repoUrl, v0AppUploadParams.repoUrl) &&
                Objects.equals(this.title, v0AppUploadParams.title) &&
                Objects.equals(this.type, v0AppUploadParams.type);
    }

    @Override
    public int hashCode() {
        return Objects.hash(defaultBranchName, gitOwner, gitRepoSlug, isPublic, manualApprovalEnabled, organizationSlug, provider, repoUrl, title,
                type);
    }

    @Override
    public String toString() {

        String sb = "class V0AppUploadParams {\n"
                + "    defaultBranchName: " + toIndentedString(defaultBranchName) + "\n"
                + "    gitOwner: " + toIndentedString(gitOwner) + "\n"
                + "    gitRepoSlug: " + toIndentedString(gitRepoSlug) + "\n"
                + "    isPublic: " + toIndentedString(isPublic) + "\n"
                + "    manualApprovalEnabled: " + toIndentedString(manualApprovalEnabled) + "\n"
                + "    organizationSlug: " + toIndentedString(organizationSlug) + "\n"
                + "    provider: " + toIndentedString(provider) + "\n"
                + "    repoUrl: " + toIndentedString(repoUrl) + "\n"
                + "    title: " + toIndentedString(title) + "\n"
                + "    type: " + toIndentedString(type) + "\n"
                + "}";
        return sb;
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
